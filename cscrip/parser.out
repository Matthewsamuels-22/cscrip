Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    bool_declaration
    do_statement
    double_quotes
    false_literal
    full_stop_statement
    goto_statement
    in_statement
    print_statement
    single_quotes
    true_literal

Grammar

Rule 0     S' -> program_start
Rule 1     program_start -> program
Rule 2     program_start -> statement
Rule 3     program_start -> data_structure
Rule 4     data_structure -> class
Rule 5     data_structure -> struct
Rule 6     data_structure -> list_structure
Rule 7     data_structure -> array
Rule 8     data_structure -> empty
Rule 9     list_structure -> list
Rule 10    program -> type_declaration main_statement left_curl_op statement right_curl_op
Rule 11    program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op
Rule 12    type_declaration -> int_declaration
Rule 13    type_declaration -> float_declaration
Rule 14    type_declaration -> double_declaration
Rule 15    type_declaration -> string_declaration
Rule 16    type_declaration -> char_declaration
Rule 17    statement -> function_call_statement
Rule 18    statement -> conditional_statement
Rule 19    statement -> loop_statement
Rule 20    statement -> arithmetic_statement
Rule 21    statement -> break_statement
Rule 22    statement -> return_statement identifier
Rule 23    statement -> return_statement
Rule 24    conditional_statement -> if_block
Rule 25    conditional_statement -> if_block elif_block
Rule 26    conditional_statement -> if_block else_block
Rule 27    conditional_statement -> left_par_op inequalities right_par_op
Rule 28    conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
Rule 29    if_block -> if_statement inequalities left_curl_op statement right_curl_op
Rule 30    else_block -> else_statement left_curl_op statement right_curl_op
Rule 31    elif_block -> elif_statement inequalities left_curl_op statement right_curl_op
Rule 32    inequalities -> literal_or_identifier inequalities_sym literal_or_identifier
Rule 33    inequalities_sym -> equivalent_op
Rule 34    inequalities_sym -> less_or_eq_op
Rule 35    inequalities_sym -> great_or_eq_op
Rule 36    inequalities_sym -> less_op
Rule 37    inequalities_sym -> great_op
Rule 38    inequalities_sym -> and
Rule 39    inequalities_sym -> or
Rule 40    inequalities_sym -> bool_literal
Rule 41    inequalities_sym -> not_equal
Rule 42    inequalities_sym -> <empty>
Rule 43    function_parameter -> literal_or_identifier
Rule 44    function_parameter -> function_parameter_list
Rule 45    function_parameter -> left_par_op function_parameter right_par_op
Rule 46    function_parameter_list -> function_parameter comma_statement literal_or_identifier
Rule 47    literal_or_identifier -> identifier
Rule 48    literal_or_identifier -> data_literal
Rule 49    function_call_statement -> function_parameter
Rule 50    loop_statement -> while_statement inequalities left_curl_op statement right_curl_op
Rule 51    loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
Rule 52    loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
Rule 53    arithmetic_statement -> arithmetic_expr
Rule 54    arithmetic_expr -> identifier assign_op arithmetic_expr
Rule 55    arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr
Rule 56    arithmetic_expr -> left_par_op arithmetic_expr right_par_op
Rule 57    arithmetic_expr -> literal_or_identifier
Rule 58    arithmetic_expr -> identifier assign_op function_call_statement
Rule 59    arithmetic_op -> expo_op
Rule 60    arithmetic_op -> mul_op
Rule 61    arithmetic_op -> div_op
Rule 62    arithmetic_op -> add_op
Rule 63    arithmetic_op -> sub_op
Rule 64    data_literal -> int_literal
Rule 65    data_literal -> float_literal
Rule 66    data_literal -> double_literal
Rule 67    data_literal -> char_literal
Rule 68    data_literal -> string_literal
Rule 69    empty -> <empty>

Terminals, with rules where they appear

add_op               : 62
and                  : 38
array                : 7
assign_op            : 54 58
bool_declaration     : 
bool_literal         : 40
break_statement      : 21
char_declaration     : 16
char_literal         : 67
class                : 4
colon_statement      : 28
comma_statement      : 46
div_op               : 61
do_statement         : 
double_declaration   : 14
double_literal       : 66
double_quotes        : 
elif_statement       : 31
else_statement       : 30
equivalent_op        : 33
error                : 
expo_op              : 59
false_literal        : 
float_declaration    : 13
float_literal        : 65
for_statement        : 51 52
full_stop_statement  : 
goto_statement       : 
great_op             : 37
great_or_eq_op       : 35
identifier           : 11 22 47 54 58
if_statement         : 29
in_statement         : 
int_declaration      : 12
int_literal          : 64
left_curl_op         : 10 11 28 29 30 31 50 51 52
left_par_op          : 11 27 28 45 56
less_op              : 36
less_or_eq_op        : 34
list                 : 9
main_statement       : 10 11
mul_op               : 60
not_equal            : 41
or                   : 39
print_statement      : 
question_op          : 28
return_statement     : 22 23
right_curl_op        : 10 11 28 29 30 31 50 51 52
right_par_op         : 11 27 28 45 56
semi_colon_statement : 51 52 52
single_quotes        : 
string_declaration   : 15
string_literal       : 68
struct               : 5
sub_op               : 63
true_literal         : 
while_statement      : 50

Nonterminals, with rules where they appear

arithmetic_expr      : 53 54 55 55 56
arithmetic_op        : 55
arithmetic_statement : 20 51 52 52
conditional_statement : 18
data_literal         : 48
data_structure       : 3
elif_block           : 25
else_block           : 26
empty                : 8
function_call_statement : 17 58
function_parameter   : 45 46 49
function_parameter_list : 44
if_block             : 24 25 26
inequalities         : 27 28 29 31 50 52
inequalities_sym     : 32
list_structure       : 6
literal_or_identifier : 32 32 43 46 57
loop_statement       : 19
program              : 1
program_start        : 0
statement            : 2 10 11 28 28 29 30 31 50 51 52
type_declaration     : 10 11 11

Parsing method: LALR

state 0

    (0) S' -> . program_start
    (1) program_start -> . program
    (2) program_start -> . statement
    (3) program_start -> . data_structure
    (10) program -> . type_declaration main_statement left_curl_op statement right_curl_op
    (11) program -> . type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (4) data_structure -> . class
    (5) data_structure -> . struct
    (6) data_structure -> . list_structure
    (7) data_structure -> . array
    (8) data_structure -> . empty
    (12) type_declaration -> . int_declaration
    (13) type_declaration -> . float_declaration
    (14) type_declaration -> . double_declaration
    (15) type_declaration -> . string_declaration
    (16) type_declaration -> . char_declaration
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (9) list_structure -> . list
    (69) empty -> .
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    class           shift and go to state 14
    struct          shift and go to state 15
    array           shift and go to state 17
    int_declaration shift and go to state 19
    float_declaration shift and go to state 20
    double_declaration shift and go to state 21
    string_declaration shift and go to state 22
    char_declaration shift and go to state 23
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    list            shift and go to state 29
    $end            reduce using rule 69 (empty -> .)
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    program_start                  shift and go to state 1
    program                        shift and go to state 2
    statement                      shift and go to state 3
    data_structure                 shift and go to state 4
    type_declaration               shift and go to state 5
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    list_structure                 shift and go to state 16
    empty                          shift and go to state 18
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 1

    (0) S' -> program_start .



state 2

    (1) program_start -> program .

    $end            reduce using rule 1 (program_start -> program .)


state 3

    (2) program_start -> statement .

    $end            reduce using rule 2 (program_start -> statement .)


state 4

    (3) program_start -> data_structure .

    $end            reduce using rule 3 (program_start -> data_structure .)


state 5

    (10) program -> type_declaration . main_statement left_curl_op statement right_curl_op
    (11) program -> type_declaration . main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op

    main_statement  shift and go to state 39


state 6

    (27) conditional_statement -> left_par_op . inequalities right_par_op
    (28) conditional_statement -> left_par_op . inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (45) function_parameter -> left_par_op . function_parameter right_par_op
    (56) arithmetic_expr -> left_par_op . arithmetic_expr right_par_op
    (32) inequalities -> . literal_or_identifier inequalities_sym literal_or_identifier
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    left_par_op     shift and go to state 40
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    inequalities                   shift and go to state 41
    function_parameter             shift and go to state 42
    arithmetic_expr                shift and go to state 43
    literal_or_identifier          shift and go to state 44
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 7

    (54) arithmetic_expr -> identifier . assign_op arithmetic_expr
    (58) arithmetic_expr -> identifier . assign_op function_call_statement
    (47) literal_or_identifier -> identifier .

    assign_op       shift and go to state 45
    comma_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    $end            reduce using rule 47 (literal_or_identifier -> identifier .)
    expo_op         reduce using rule 47 (literal_or_identifier -> identifier .)
    mul_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    div_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    add_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    sub_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    equivalent_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    less_or_eq_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    great_or_eq_op  reduce using rule 47 (literal_or_identifier -> identifier .)
    less_op         reduce using rule 47 (literal_or_identifier -> identifier .)
    great_op        reduce using rule 47 (literal_or_identifier -> identifier .)
    and             reduce using rule 47 (literal_or_identifier -> identifier .)
    or              reduce using rule 47 (literal_or_identifier -> identifier .)
    bool_literal    reduce using rule 47 (literal_or_identifier -> identifier .)
    not_equal       reduce using rule 47 (literal_or_identifier -> identifier .)
    identifier      reduce using rule 47 (literal_or_identifier -> identifier .)
    int_literal     reduce using rule 47 (literal_or_identifier -> identifier .)
    float_literal   reduce using rule 47 (literal_or_identifier -> identifier .)
    double_literal  reduce using rule 47 (literal_or_identifier -> identifier .)
    char_literal    reduce using rule 47 (literal_or_identifier -> identifier .)
    string_literal  reduce using rule 47 (literal_or_identifier -> identifier .)
    right_par_op    reduce using rule 47 (literal_or_identifier -> identifier .)
    semi_colon_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    right_curl_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    colon_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    left_curl_op    reduce using rule 47 (literal_or_identifier -> identifier .)


state 8

    (17) statement -> function_call_statement .

    $end            reduce using rule 17 (statement -> function_call_statement .)
    right_curl_op   reduce using rule 17 (statement -> function_call_statement .)
    colon_statement reduce using rule 17 (statement -> function_call_statement .)


state 9

    (18) statement -> conditional_statement .

    $end            reduce using rule 18 (statement -> conditional_statement .)
    right_curl_op   reduce using rule 18 (statement -> conditional_statement .)
    colon_statement reduce using rule 18 (statement -> conditional_statement .)


state 10

    (19) statement -> loop_statement .

    $end            reduce using rule 19 (statement -> loop_statement .)
    right_curl_op   reduce using rule 19 (statement -> loop_statement .)
    colon_statement reduce using rule 19 (statement -> loop_statement .)


state 11

    (20) statement -> arithmetic_statement .

    $end            reduce using rule 20 (statement -> arithmetic_statement .)
    right_curl_op   reduce using rule 20 (statement -> arithmetic_statement .)
    colon_statement reduce using rule 20 (statement -> arithmetic_statement .)


state 12

    (21) statement -> break_statement .

    $end            reduce using rule 21 (statement -> break_statement .)
    right_curl_op   reduce using rule 21 (statement -> break_statement .)
    colon_statement reduce using rule 21 (statement -> break_statement .)


state 13

    (22) statement -> return_statement . identifier
    (23) statement -> return_statement .

    identifier      shift and go to state 46
    $end            reduce using rule 23 (statement -> return_statement .)
    right_curl_op   reduce using rule 23 (statement -> return_statement .)
    colon_statement reduce using rule 23 (statement -> return_statement .)


state 14

    (4) data_structure -> class .

    $end            reduce using rule 4 (data_structure -> class .)


state 15

    (5) data_structure -> struct .

    $end            reduce using rule 5 (data_structure -> struct .)


state 16

    (6) data_structure -> list_structure .

    $end            reduce using rule 6 (data_structure -> list_structure .)


state 17

    (7) data_structure -> array .

    $end            reduce using rule 7 (data_structure -> array .)


state 18

    (8) data_structure -> empty .

    $end            reduce using rule 8 (data_structure -> empty .)


state 19

    (12) type_declaration -> int_declaration .

    main_statement  reduce using rule 12 (type_declaration -> int_declaration .)
    identifier      reduce using rule 12 (type_declaration -> int_declaration .)


state 20

    (13) type_declaration -> float_declaration .

    main_statement  reduce using rule 13 (type_declaration -> float_declaration .)
    identifier      reduce using rule 13 (type_declaration -> float_declaration .)


state 21

    (14) type_declaration -> double_declaration .

    main_statement  reduce using rule 14 (type_declaration -> double_declaration .)
    identifier      reduce using rule 14 (type_declaration -> double_declaration .)


state 22

    (15) type_declaration -> string_declaration .

    main_statement  reduce using rule 15 (type_declaration -> string_declaration .)
    identifier      reduce using rule 15 (type_declaration -> string_declaration .)


state 23

    (16) type_declaration -> char_declaration .

    main_statement  reduce using rule 16 (type_declaration -> char_declaration .)
    identifier      reduce using rule 16 (type_declaration -> char_declaration .)


state 24

    (49) function_call_statement -> function_parameter .
    (46) function_parameter_list -> function_parameter . comma_statement literal_or_identifier

    $end            reduce using rule 49 (function_call_statement -> function_parameter .)
    expo_op         reduce using rule 49 (function_call_statement -> function_parameter .)
    mul_op          reduce using rule 49 (function_call_statement -> function_parameter .)
    div_op          reduce using rule 49 (function_call_statement -> function_parameter .)
    add_op          reduce using rule 49 (function_call_statement -> function_parameter .)
    sub_op          reduce using rule 49 (function_call_statement -> function_parameter .)
    right_par_op    reduce using rule 49 (function_call_statement -> function_parameter .)
    semi_colon_statement reduce using rule 49 (function_call_statement -> function_parameter .)
    right_curl_op   reduce using rule 49 (function_call_statement -> function_parameter .)
    colon_statement reduce using rule 49 (function_call_statement -> function_parameter .)
    left_curl_op    reduce using rule 49 (function_call_statement -> function_parameter .)
    comma_statement shift and go to state 47


state 25

    (24) conditional_statement -> if_block .
    (25) conditional_statement -> if_block . elif_block
    (26) conditional_statement -> if_block . else_block
    (31) elif_block -> . elif_statement inequalities left_curl_op statement right_curl_op
    (30) else_block -> . else_statement left_curl_op statement right_curl_op

    $end            reduce using rule 24 (conditional_statement -> if_block .)
    right_curl_op   reduce using rule 24 (conditional_statement -> if_block .)
    colon_statement reduce using rule 24 (conditional_statement -> if_block .)
    elif_statement  shift and go to state 50
    else_statement  shift and go to state 51

    elif_block                     shift and go to state 48
    else_block                     shift and go to state 49

state 26

    (50) loop_statement -> while_statement . inequalities left_curl_op statement right_curl_op
    (32) inequalities -> . literal_or_identifier inequalities_sym literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    inequalities                   shift and go to state 52
    literal_or_identifier          shift and go to state 53
    data_literal                   shift and go to state 33

state 27

    (51) loop_statement -> for_statement . arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> for_statement . arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 7
    left_par_op     shift and go to state 56
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_statement           shift and go to state 55
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 57
    data_literal                   shift and go to state 33

state 28

    (53) arithmetic_statement -> arithmetic_expr .
    (55) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (59) arithmetic_op -> . expo_op
    (60) arithmetic_op -> . mul_op
    (61) arithmetic_op -> . div_op
    (62) arithmetic_op -> . add_op
    (63) arithmetic_op -> . sub_op

    $end            reduce using rule 53 (arithmetic_statement -> arithmetic_expr .)
    semi_colon_statement reduce using rule 53 (arithmetic_statement -> arithmetic_expr .)
    right_curl_op   reduce using rule 53 (arithmetic_statement -> arithmetic_expr .)
    colon_statement reduce using rule 53 (arithmetic_statement -> arithmetic_expr .)
    left_curl_op    reduce using rule 53 (arithmetic_statement -> arithmetic_expr .)
    expo_op         shift and go to state 59
    mul_op          shift and go to state 60
    div_op          shift and go to state 61
    add_op          shift and go to state 62
    sub_op          shift and go to state 63

    arithmetic_op                  shift and go to state 58

state 29

    (9) list_structure -> list .

    $end            reduce using rule 9 (list_structure -> list .)


state 30

    (43) function_parameter -> literal_or_identifier .
    (57) arithmetic_expr -> literal_or_identifier .

  ! reduce/reduce conflict for $end resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for right_par_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for right_curl_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for colon_statement resolved using rule 43 (function_parameter -> literal_or_identifier .)
    comma_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    $end            reduce using rule 43 (function_parameter -> literal_or_identifier .)
    right_par_op    reduce using rule 43 (function_parameter -> literal_or_identifier .)
    right_curl_op   reduce using rule 43 (function_parameter -> literal_or_identifier .)
    colon_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    expo_op         reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    mul_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    div_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    add_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    sub_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)

  ! $end            [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! right_par_op    [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! right_curl_op   [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! colon_statement [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]


state 31

    (44) function_parameter -> function_parameter_list .

    comma_statement reduce using rule 44 (function_parameter -> function_parameter_list .)
    $end            reduce using rule 44 (function_parameter -> function_parameter_list .)
    right_par_op    reduce using rule 44 (function_parameter -> function_parameter_list .)
    expo_op         reduce using rule 44 (function_parameter -> function_parameter_list .)
    mul_op          reduce using rule 44 (function_parameter -> function_parameter_list .)
    div_op          reduce using rule 44 (function_parameter -> function_parameter_list .)
    add_op          reduce using rule 44 (function_parameter -> function_parameter_list .)
    sub_op          reduce using rule 44 (function_parameter -> function_parameter_list .)
    semi_colon_statement reduce using rule 44 (function_parameter -> function_parameter_list .)
    right_curl_op   reduce using rule 44 (function_parameter -> function_parameter_list .)
    colon_statement reduce using rule 44 (function_parameter -> function_parameter_list .)
    left_curl_op    reduce using rule 44 (function_parameter -> function_parameter_list .)


state 32

    (29) if_block -> if_statement . inequalities left_curl_op statement right_curl_op
    (32) inequalities -> . literal_or_identifier inequalities_sym literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    inequalities                   shift and go to state 64
    literal_or_identifier          shift and go to state 53
    data_literal                   shift and go to state 33

state 33

    (48) literal_or_identifier -> data_literal .

    comma_statement reduce using rule 48 (literal_or_identifier -> data_literal .)
    $end            reduce using rule 48 (literal_or_identifier -> data_literal .)
    expo_op         reduce using rule 48 (literal_or_identifier -> data_literal .)
    mul_op          reduce using rule 48 (literal_or_identifier -> data_literal .)
    div_op          reduce using rule 48 (literal_or_identifier -> data_literal .)
    add_op          reduce using rule 48 (literal_or_identifier -> data_literal .)
    sub_op          reduce using rule 48 (literal_or_identifier -> data_literal .)
    equivalent_op   reduce using rule 48 (literal_or_identifier -> data_literal .)
    less_or_eq_op   reduce using rule 48 (literal_or_identifier -> data_literal .)
    great_or_eq_op  reduce using rule 48 (literal_or_identifier -> data_literal .)
    less_op         reduce using rule 48 (literal_or_identifier -> data_literal .)
    great_op        reduce using rule 48 (literal_or_identifier -> data_literal .)
    and             reduce using rule 48 (literal_or_identifier -> data_literal .)
    or              reduce using rule 48 (literal_or_identifier -> data_literal .)
    bool_literal    reduce using rule 48 (literal_or_identifier -> data_literal .)
    not_equal       reduce using rule 48 (literal_or_identifier -> data_literal .)
    identifier      reduce using rule 48 (literal_or_identifier -> data_literal .)
    int_literal     reduce using rule 48 (literal_or_identifier -> data_literal .)
    float_literal   reduce using rule 48 (literal_or_identifier -> data_literal .)
    double_literal  reduce using rule 48 (literal_or_identifier -> data_literal .)
    char_literal    reduce using rule 48 (literal_or_identifier -> data_literal .)
    string_literal  reduce using rule 48 (literal_or_identifier -> data_literal .)
    right_par_op    reduce using rule 48 (literal_or_identifier -> data_literal .)
    semi_colon_statement reduce using rule 48 (literal_or_identifier -> data_literal .)
    right_curl_op   reduce using rule 48 (literal_or_identifier -> data_literal .)
    colon_statement reduce using rule 48 (literal_or_identifier -> data_literal .)
    left_curl_op    reduce using rule 48 (literal_or_identifier -> data_literal .)


state 34

    (64) data_literal -> int_literal .

    comma_statement reduce using rule 64 (data_literal -> int_literal .)
    $end            reduce using rule 64 (data_literal -> int_literal .)
    expo_op         reduce using rule 64 (data_literal -> int_literal .)
    mul_op          reduce using rule 64 (data_literal -> int_literal .)
    div_op          reduce using rule 64 (data_literal -> int_literal .)
    add_op          reduce using rule 64 (data_literal -> int_literal .)
    sub_op          reduce using rule 64 (data_literal -> int_literal .)
    equivalent_op   reduce using rule 64 (data_literal -> int_literal .)
    less_or_eq_op   reduce using rule 64 (data_literal -> int_literal .)
    great_or_eq_op  reduce using rule 64 (data_literal -> int_literal .)
    less_op         reduce using rule 64 (data_literal -> int_literal .)
    great_op        reduce using rule 64 (data_literal -> int_literal .)
    and             reduce using rule 64 (data_literal -> int_literal .)
    or              reduce using rule 64 (data_literal -> int_literal .)
    bool_literal    reduce using rule 64 (data_literal -> int_literal .)
    not_equal       reduce using rule 64 (data_literal -> int_literal .)
    identifier      reduce using rule 64 (data_literal -> int_literal .)
    int_literal     reduce using rule 64 (data_literal -> int_literal .)
    float_literal   reduce using rule 64 (data_literal -> int_literal .)
    double_literal  reduce using rule 64 (data_literal -> int_literal .)
    char_literal    reduce using rule 64 (data_literal -> int_literal .)
    string_literal  reduce using rule 64 (data_literal -> int_literal .)
    right_par_op    reduce using rule 64 (data_literal -> int_literal .)
    semi_colon_statement reduce using rule 64 (data_literal -> int_literal .)
    right_curl_op   reduce using rule 64 (data_literal -> int_literal .)
    colon_statement reduce using rule 64 (data_literal -> int_literal .)
    left_curl_op    reduce using rule 64 (data_literal -> int_literal .)


state 35

    (65) data_literal -> float_literal .

    comma_statement reduce using rule 65 (data_literal -> float_literal .)
    $end            reduce using rule 65 (data_literal -> float_literal .)
    expo_op         reduce using rule 65 (data_literal -> float_literal .)
    mul_op          reduce using rule 65 (data_literal -> float_literal .)
    div_op          reduce using rule 65 (data_literal -> float_literal .)
    add_op          reduce using rule 65 (data_literal -> float_literal .)
    sub_op          reduce using rule 65 (data_literal -> float_literal .)
    equivalent_op   reduce using rule 65 (data_literal -> float_literal .)
    less_or_eq_op   reduce using rule 65 (data_literal -> float_literal .)
    great_or_eq_op  reduce using rule 65 (data_literal -> float_literal .)
    less_op         reduce using rule 65 (data_literal -> float_literal .)
    great_op        reduce using rule 65 (data_literal -> float_literal .)
    and             reduce using rule 65 (data_literal -> float_literal .)
    or              reduce using rule 65 (data_literal -> float_literal .)
    bool_literal    reduce using rule 65 (data_literal -> float_literal .)
    not_equal       reduce using rule 65 (data_literal -> float_literal .)
    identifier      reduce using rule 65 (data_literal -> float_literal .)
    int_literal     reduce using rule 65 (data_literal -> float_literal .)
    float_literal   reduce using rule 65 (data_literal -> float_literal .)
    double_literal  reduce using rule 65 (data_literal -> float_literal .)
    char_literal    reduce using rule 65 (data_literal -> float_literal .)
    string_literal  reduce using rule 65 (data_literal -> float_literal .)
    right_par_op    reduce using rule 65 (data_literal -> float_literal .)
    semi_colon_statement reduce using rule 65 (data_literal -> float_literal .)
    right_curl_op   reduce using rule 65 (data_literal -> float_literal .)
    colon_statement reduce using rule 65 (data_literal -> float_literal .)
    left_curl_op    reduce using rule 65 (data_literal -> float_literal .)


state 36

    (66) data_literal -> double_literal .

    comma_statement reduce using rule 66 (data_literal -> double_literal .)
    $end            reduce using rule 66 (data_literal -> double_literal .)
    expo_op         reduce using rule 66 (data_literal -> double_literal .)
    mul_op          reduce using rule 66 (data_literal -> double_literal .)
    div_op          reduce using rule 66 (data_literal -> double_literal .)
    add_op          reduce using rule 66 (data_literal -> double_literal .)
    sub_op          reduce using rule 66 (data_literal -> double_literal .)
    equivalent_op   reduce using rule 66 (data_literal -> double_literal .)
    less_or_eq_op   reduce using rule 66 (data_literal -> double_literal .)
    great_or_eq_op  reduce using rule 66 (data_literal -> double_literal .)
    less_op         reduce using rule 66 (data_literal -> double_literal .)
    great_op        reduce using rule 66 (data_literal -> double_literal .)
    and             reduce using rule 66 (data_literal -> double_literal .)
    or              reduce using rule 66 (data_literal -> double_literal .)
    bool_literal    reduce using rule 66 (data_literal -> double_literal .)
    not_equal       reduce using rule 66 (data_literal -> double_literal .)
    identifier      reduce using rule 66 (data_literal -> double_literal .)
    int_literal     reduce using rule 66 (data_literal -> double_literal .)
    float_literal   reduce using rule 66 (data_literal -> double_literal .)
    double_literal  reduce using rule 66 (data_literal -> double_literal .)
    char_literal    reduce using rule 66 (data_literal -> double_literal .)
    string_literal  reduce using rule 66 (data_literal -> double_literal .)
    right_par_op    reduce using rule 66 (data_literal -> double_literal .)
    semi_colon_statement reduce using rule 66 (data_literal -> double_literal .)
    right_curl_op   reduce using rule 66 (data_literal -> double_literal .)
    colon_statement reduce using rule 66 (data_literal -> double_literal .)
    left_curl_op    reduce using rule 66 (data_literal -> double_literal .)


state 37

    (67) data_literal -> char_literal .

    comma_statement reduce using rule 67 (data_literal -> char_literal .)
    $end            reduce using rule 67 (data_literal -> char_literal .)
    expo_op         reduce using rule 67 (data_literal -> char_literal .)
    mul_op          reduce using rule 67 (data_literal -> char_literal .)
    div_op          reduce using rule 67 (data_literal -> char_literal .)
    add_op          reduce using rule 67 (data_literal -> char_literal .)
    sub_op          reduce using rule 67 (data_literal -> char_literal .)
    equivalent_op   reduce using rule 67 (data_literal -> char_literal .)
    less_or_eq_op   reduce using rule 67 (data_literal -> char_literal .)
    great_or_eq_op  reduce using rule 67 (data_literal -> char_literal .)
    less_op         reduce using rule 67 (data_literal -> char_literal .)
    great_op        reduce using rule 67 (data_literal -> char_literal .)
    and             reduce using rule 67 (data_literal -> char_literal .)
    or              reduce using rule 67 (data_literal -> char_literal .)
    bool_literal    reduce using rule 67 (data_literal -> char_literal .)
    not_equal       reduce using rule 67 (data_literal -> char_literal .)
    identifier      reduce using rule 67 (data_literal -> char_literal .)
    int_literal     reduce using rule 67 (data_literal -> char_literal .)
    float_literal   reduce using rule 67 (data_literal -> char_literal .)
    double_literal  reduce using rule 67 (data_literal -> char_literal .)
    char_literal    reduce using rule 67 (data_literal -> char_literal .)
    string_literal  reduce using rule 67 (data_literal -> char_literal .)
    right_par_op    reduce using rule 67 (data_literal -> char_literal .)
    semi_colon_statement reduce using rule 67 (data_literal -> char_literal .)
    right_curl_op   reduce using rule 67 (data_literal -> char_literal .)
    colon_statement reduce using rule 67 (data_literal -> char_literal .)
    left_curl_op    reduce using rule 67 (data_literal -> char_literal .)


state 38

    (68) data_literal -> string_literal .

    comma_statement reduce using rule 68 (data_literal -> string_literal .)
    $end            reduce using rule 68 (data_literal -> string_literal .)
    expo_op         reduce using rule 68 (data_literal -> string_literal .)
    mul_op          reduce using rule 68 (data_literal -> string_literal .)
    div_op          reduce using rule 68 (data_literal -> string_literal .)
    add_op          reduce using rule 68 (data_literal -> string_literal .)
    sub_op          reduce using rule 68 (data_literal -> string_literal .)
    equivalent_op   reduce using rule 68 (data_literal -> string_literal .)
    less_or_eq_op   reduce using rule 68 (data_literal -> string_literal .)
    great_or_eq_op  reduce using rule 68 (data_literal -> string_literal .)
    less_op         reduce using rule 68 (data_literal -> string_literal .)
    great_op        reduce using rule 68 (data_literal -> string_literal .)
    and             reduce using rule 68 (data_literal -> string_literal .)
    or              reduce using rule 68 (data_literal -> string_literal .)
    bool_literal    reduce using rule 68 (data_literal -> string_literal .)
    not_equal       reduce using rule 68 (data_literal -> string_literal .)
    identifier      reduce using rule 68 (data_literal -> string_literal .)
    int_literal     reduce using rule 68 (data_literal -> string_literal .)
    float_literal   reduce using rule 68 (data_literal -> string_literal .)
    double_literal  reduce using rule 68 (data_literal -> string_literal .)
    char_literal    reduce using rule 68 (data_literal -> string_literal .)
    string_literal  reduce using rule 68 (data_literal -> string_literal .)
    right_par_op    reduce using rule 68 (data_literal -> string_literal .)
    semi_colon_statement reduce using rule 68 (data_literal -> string_literal .)
    right_curl_op   reduce using rule 68 (data_literal -> string_literal .)
    colon_statement reduce using rule 68 (data_literal -> string_literal .)
    left_curl_op    reduce using rule 68 (data_literal -> string_literal .)


state 39

    (10) program -> type_declaration main_statement . left_curl_op statement right_curl_op
    (11) program -> type_declaration main_statement . left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 65
    left_par_op     shift and go to state 66


state 40

    (45) function_parameter -> left_par_op . function_parameter right_par_op
    (56) arithmetic_expr -> left_par_op . arithmetic_expr right_par_op
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    left_par_op     shift and go to state 40
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    function_parameter             shift and go to state 42
    arithmetic_expr                shift and go to state 43
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 41

    (27) conditional_statement -> left_par_op inequalities . right_par_op
    (28) conditional_statement -> left_par_op inequalities . right_par_op question_op left_curl_op statement colon_statement statement right_curl_op

    right_par_op    shift and go to state 67


state 42

    (45) function_parameter -> left_par_op function_parameter . right_par_op
    (46) function_parameter_list -> function_parameter . comma_statement literal_or_identifier

    right_par_op    shift and go to state 68
    comma_statement shift and go to state 47


state 43

    (56) arithmetic_expr -> left_par_op arithmetic_expr . right_par_op
    (55) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (59) arithmetic_op -> . expo_op
    (60) arithmetic_op -> . mul_op
    (61) arithmetic_op -> . div_op
    (62) arithmetic_op -> . add_op
    (63) arithmetic_op -> . sub_op

    right_par_op    shift and go to state 69
    expo_op         shift and go to state 59
    mul_op          shift and go to state 60
    div_op          shift and go to state 61
    add_op          shift and go to state 62
    sub_op          shift and go to state 63

    arithmetic_op                  shift and go to state 58

state 44

    (32) inequalities -> literal_or_identifier . inequalities_sym literal_or_identifier
    (43) function_parameter -> literal_or_identifier .
    (57) arithmetic_expr -> literal_or_identifier .
    (33) inequalities_sym -> . equivalent_op
    (34) inequalities_sym -> . less_or_eq_op
    (35) inequalities_sym -> . great_or_eq_op
    (36) inequalities_sym -> . less_op
    (37) inequalities_sym -> . great_op
    (38) inequalities_sym -> . and
    (39) inequalities_sym -> . or
    (40) inequalities_sym -> . bool_literal
    (41) inequalities_sym -> . not_equal
    (42) inequalities_sym -> .

  ! reduce/reduce conflict for right_par_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
    right_par_op    reduce using rule 43 (function_parameter -> literal_or_identifier .)
    comma_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    expo_op         reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    mul_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    div_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    add_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    sub_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    equivalent_op   shift and go to state 71
    less_or_eq_op   shift and go to state 72
    great_or_eq_op  shift and go to state 73
    less_op         shift and go to state 74
    great_op        shift and go to state 75
    and             shift and go to state 76
    or              shift and go to state 77
    bool_literal    shift and go to state 78
    not_equal       shift and go to state 79
    identifier      reduce using rule 42 (inequalities_sym -> .)
    int_literal     reduce using rule 42 (inequalities_sym -> .)
    float_literal   reduce using rule 42 (inequalities_sym -> .)
    double_literal  reduce using rule 42 (inequalities_sym -> .)
    char_literal    reduce using rule 42 (inequalities_sym -> .)
    string_literal  reduce using rule 42 (inequalities_sym -> .)

  ! right_par_op    [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]

    inequalities_sym               shift and go to state 70

state 45

    (54) arithmetic_expr -> identifier assign_op . arithmetic_expr
    (58) arithmetic_expr -> identifier assign_op . function_call_statement
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (49) function_call_statement -> . function_parameter
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier

    identifier      shift and go to state 7
    left_par_op     shift and go to state 82
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_expr                shift and go to state 80
    function_call_statement        shift and go to state 81
    literal_or_identifier          shift and go to state 83
    function_parameter             shift and go to state 24
    data_literal                   shift and go to state 33
    function_parameter_list        shift and go to state 31

state 46

    (22) statement -> return_statement identifier .

    $end            reduce using rule 22 (statement -> return_statement identifier .)
    right_curl_op   reduce using rule 22 (statement -> return_statement identifier .)
    colon_statement reduce using rule 22 (statement -> return_statement identifier .)


state 47

    (46) function_parameter_list -> function_parameter comma_statement . literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    literal_or_identifier          shift and go to state 84
    data_literal                   shift and go to state 33

state 48

    (25) conditional_statement -> if_block elif_block .

    $end            reduce using rule 25 (conditional_statement -> if_block elif_block .)
    right_curl_op   reduce using rule 25 (conditional_statement -> if_block elif_block .)
    colon_statement reduce using rule 25 (conditional_statement -> if_block elif_block .)


state 49

    (26) conditional_statement -> if_block else_block .

    $end            reduce using rule 26 (conditional_statement -> if_block else_block .)
    right_curl_op   reduce using rule 26 (conditional_statement -> if_block else_block .)
    colon_statement reduce using rule 26 (conditional_statement -> if_block else_block .)


state 50

    (31) elif_block -> elif_statement . inequalities left_curl_op statement right_curl_op
    (32) inequalities -> . literal_or_identifier inequalities_sym literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    inequalities                   shift and go to state 85
    literal_or_identifier          shift and go to state 53
    data_literal                   shift and go to state 33

state 51

    (30) else_block -> else_statement . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 86


state 52

    (50) loop_statement -> while_statement inequalities . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 87


state 53

    (32) inequalities -> literal_or_identifier . inequalities_sym literal_or_identifier
    (33) inequalities_sym -> . equivalent_op
    (34) inequalities_sym -> . less_or_eq_op
    (35) inequalities_sym -> . great_or_eq_op
    (36) inequalities_sym -> . less_op
    (37) inequalities_sym -> . great_op
    (38) inequalities_sym -> . and
    (39) inequalities_sym -> . or
    (40) inequalities_sym -> . bool_literal
    (41) inequalities_sym -> . not_equal
    (42) inequalities_sym -> .

    equivalent_op   shift and go to state 71
    less_or_eq_op   shift and go to state 72
    great_or_eq_op  shift and go to state 73
    less_op         shift and go to state 74
    great_op        shift and go to state 75
    and             shift and go to state 76
    or              shift and go to state 77
    bool_literal    shift and go to state 78
    not_equal       shift and go to state 79
    identifier      reduce using rule 42 (inequalities_sym -> .)
    int_literal     reduce using rule 42 (inequalities_sym -> .)
    float_literal   reduce using rule 42 (inequalities_sym -> .)
    double_literal  reduce using rule 42 (inequalities_sym -> .)
    char_literal    reduce using rule 42 (inequalities_sym -> .)
    string_literal  reduce using rule 42 (inequalities_sym -> .)

    inequalities_sym               shift and go to state 70

state 54

    (47) literal_or_identifier -> identifier .

    equivalent_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    less_or_eq_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    great_or_eq_op  reduce using rule 47 (literal_or_identifier -> identifier .)
    less_op         reduce using rule 47 (literal_or_identifier -> identifier .)
    great_op        reduce using rule 47 (literal_or_identifier -> identifier .)
    and             reduce using rule 47 (literal_or_identifier -> identifier .)
    or              reduce using rule 47 (literal_or_identifier -> identifier .)
    bool_literal    reduce using rule 47 (literal_or_identifier -> identifier .)
    not_equal       reduce using rule 47 (literal_or_identifier -> identifier .)
    identifier      reduce using rule 47 (literal_or_identifier -> identifier .)
    int_literal     reduce using rule 47 (literal_or_identifier -> identifier .)
    float_literal   reduce using rule 47 (literal_or_identifier -> identifier .)
    double_literal  reduce using rule 47 (literal_or_identifier -> identifier .)
    char_literal    reduce using rule 47 (literal_or_identifier -> identifier .)
    string_literal  reduce using rule 47 (literal_or_identifier -> identifier .)
    comma_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    $end            reduce using rule 47 (literal_or_identifier -> identifier .)
    right_par_op    reduce using rule 47 (literal_or_identifier -> identifier .)
    expo_op         reduce using rule 47 (literal_or_identifier -> identifier .)
    mul_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    div_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    add_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    sub_op          reduce using rule 47 (literal_or_identifier -> identifier .)
    semi_colon_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    right_curl_op   reduce using rule 47 (literal_or_identifier -> identifier .)
    colon_statement reduce using rule 47 (literal_or_identifier -> identifier .)
    left_curl_op    reduce using rule 47 (literal_or_identifier -> identifier .)


state 55

    (51) loop_statement -> for_statement arithmetic_statement . semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> for_statement arithmetic_statement . semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op

    semi_colon_statement shift and go to state 88


state 56

    (56) arithmetic_expr -> left_par_op . arithmetic_expr right_par_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 7
    left_par_op     shift and go to state 56
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_expr                shift and go to state 43
    literal_or_identifier          shift and go to state 57
    data_literal                   shift and go to state 33

state 57

    (57) arithmetic_expr -> literal_or_identifier .

    expo_op         reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    mul_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    div_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    add_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    sub_op          reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    semi_colon_statement reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    right_par_op    reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    $end            reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    right_curl_op   reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    colon_statement reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)
    left_curl_op    reduce using rule 57 (arithmetic_expr -> literal_or_identifier .)


state 58

    (55) arithmetic_expr -> arithmetic_expr arithmetic_op . arithmetic_expr
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 7
    left_par_op     shift and go to state 56
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_expr                shift and go to state 89
    literal_or_identifier          shift and go to state 57
    data_literal                   shift and go to state 33

state 59

    (59) arithmetic_op -> expo_op .

    identifier      reduce using rule 59 (arithmetic_op -> expo_op .)
    left_par_op     reduce using rule 59 (arithmetic_op -> expo_op .)
    int_literal     reduce using rule 59 (arithmetic_op -> expo_op .)
    float_literal   reduce using rule 59 (arithmetic_op -> expo_op .)
    double_literal  reduce using rule 59 (arithmetic_op -> expo_op .)
    char_literal    reduce using rule 59 (arithmetic_op -> expo_op .)
    string_literal  reduce using rule 59 (arithmetic_op -> expo_op .)


state 60

    (60) arithmetic_op -> mul_op .

    identifier      reduce using rule 60 (arithmetic_op -> mul_op .)
    left_par_op     reduce using rule 60 (arithmetic_op -> mul_op .)
    int_literal     reduce using rule 60 (arithmetic_op -> mul_op .)
    float_literal   reduce using rule 60 (arithmetic_op -> mul_op .)
    double_literal  reduce using rule 60 (arithmetic_op -> mul_op .)
    char_literal    reduce using rule 60 (arithmetic_op -> mul_op .)
    string_literal  reduce using rule 60 (arithmetic_op -> mul_op .)


state 61

    (61) arithmetic_op -> div_op .

    identifier      reduce using rule 61 (arithmetic_op -> div_op .)
    left_par_op     reduce using rule 61 (arithmetic_op -> div_op .)
    int_literal     reduce using rule 61 (arithmetic_op -> div_op .)
    float_literal   reduce using rule 61 (arithmetic_op -> div_op .)
    double_literal  reduce using rule 61 (arithmetic_op -> div_op .)
    char_literal    reduce using rule 61 (arithmetic_op -> div_op .)
    string_literal  reduce using rule 61 (arithmetic_op -> div_op .)


state 62

    (62) arithmetic_op -> add_op .

    identifier      reduce using rule 62 (arithmetic_op -> add_op .)
    left_par_op     reduce using rule 62 (arithmetic_op -> add_op .)
    int_literal     reduce using rule 62 (arithmetic_op -> add_op .)
    float_literal   reduce using rule 62 (arithmetic_op -> add_op .)
    double_literal  reduce using rule 62 (arithmetic_op -> add_op .)
    char_literal    reduce using rule 62 (arithmetic_op -> add_op .)
    string_literal  reduce using rule 62 (arithmetic_op -> add_op .)


state 63

    (63) arithmetic_op -> sub_op .

    identifier      reduce using rule 63 (arithmetic_op -> sub_op .)
    left_par_op     reduce using rule 63 (arithmetic_op -> sub_op .)
    int_literal     reduce using rule 63 (arithmetic_op -> sub_op .)
    float_literal   reduce using rule 63 (arithmetic_op -> sub_op .)
    double_literal  reduce using rule 63 (arithmetic_op -> sub_op .)
    char_literal    reduce using rule 63 (arithmetic_op -> sub_op .)
    string_literal  reduce using rule 63 (arithmetic_op -> sub_op .)


state 64

    (29) if_block -> if_statement inequalities . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 90


state 65

    (10) program -> type_declaration main_statement left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 91
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 66

    (11) program -> type_declaration main_statement left_par_op . type_declaration identifier right_par_op left_curl_op statement right_curl_op
    (12) type_declaration -> . int_declaration
    (13) type_declaration -> . float_declaration
    (14) type_declaration -> . double_declaration
    (15) type_declaration -> . string_declaration
    (16) type_declaration -> . char_declaration

    int_declaration shift and go to state 19
    float_declaration shift and go to state 20
    double_declaration shift and go to state 21
    string_declaration shift and go to state 22
    char_declaration shift and go to state 23

    type_declaration               shift and go to state 92

state 67

    (27) conditional_statement -> left_par_op inequalities right_par_op .
    (28) conditional_statement -> left_par_op inequalities right_par_op . question_op left_curl_op statement colon_statement statement right_curl_op

    $end            reduce using rule 27 (conditional_statement -> left_par_op inequalities right_par_op .)
    right_curl_op   reduce using rule 27 (conditional_statement -> left_par_op inequalities right_par_op .)
    colon_statement reduce using rule 27 (conditional_statement -> left_par_op inequalities right_par_op .)
    question_op     shift and go to state 93


state 68

    (45) function_parameter -> left_par_op function_parameter right_par_op .

    comma_statement reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    $end            reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    right_par_op    reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    expo_op         reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    mul_op          reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    div_op          reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    add_op          reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    sub_op          reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    semi_colon_statement reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    right_curl_op   reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    colon_statement reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)
    left_curl_op    reduce using rule 45 (function_parameter -> left_par_op function_parameter right_par_op .)


state 69

    (56) arithmetic_expr -> left_par_op arithmetic_expr right_par_op .

    expo_op         reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    mul_op          reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    div_op          reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    add_op          reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    sub_op          reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    $end            reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    right_par_op    reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    semi_colon_statement reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    right_curl_op   reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    colon_statement reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)
    left_curl_op    reduce using rule 56 (arithmetic_expr -> left_par_op arithmetic_expr right_par_op .)


state 70

    (32) inequalities -> literal_or_identifier inequalities_sym . literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    literal_or_identifier          shift and go to state 94
    data_literal                   shift and go to state 33

state 71

    (33) inequalities_sym -> equivalent_op .

    identifier      reduce using rule 33 (inequalities_sym -> equivalent_op .)
    int_literal     reduce using rule 33 (inequalities_sym -> equivalent_op .)
    float_literal   reduce using rule 33 (inequalities_sym -> equivalent_op .)
    double_literal  reduce using rule 33 (inequalities_sym -> equivalent_op .)
    char_literal    reduce using rule 33 (inequalities_sym -> equivalent_op .)
    string_literal  reduce using rule 33 (inequalities_sym -> equivalent_op .)


state 72

    (34) inequalities_sym -> less_or_eq_op .

    identifier      reduce using rule 34 (inequalities_sym -> less_or_eq_op .)
    int_literal     reduce using rule 34 (inequalities_sym -> less_or_eq_op .)
    float_literal   reduce using rule 34 (inequalities_sym -> less_or_eq_op .)
    double_literal  reduce using rule 34 (inequalities_sym -> less_or_eq_op .)
    char_literal    reduce using rule 34 (inequalities_sym -> less_or_eq_op .)
    string_literal  reduce using rule 34 (inequalities_sym -> less_or_eq_op .)


state 73

    (35) inequalities_sym -> great_or_eq_op .

    identifier      reduce using rule 35 (inequalities_sym -> great_or_eq_op .)
    int_literal     reduce using rule 35 (inequalities_sym -> great_or_eq_op .)
    float_literal   reduce using rule 35 (inequalities_sym -> great_or_eq_op .)
    double_literal  reduce using rule 35 (inequalities_sym -> great_or_eq_op .)
    char_literal    reduce using rule 35 (inequalities_sym -> great_or_eq_op .)
    string_literal  reduce using rule 35 (inequalities_sym -> great_or_eq_op .)


state 74

    (36) inequalities_sym -> less_op .

    identifier      reduce using rule 36 (inequalities_sym -> less_op .)
    int_literal     reduce using rule 36 (inequalities_sym -> less_op .)
    float_literal   reduce using rule 36 (inequalities_sym -> less_op .)
    double_literal  reduce using rule 36 (inequalities_sym -> less_op .)
    char_literal    reduce using rule 36 (inequalities_sym -> less_op .)
    string_literal  reduce using rule 36 (inequalities_sym -> less_op .)


state 75

    (37) inequalities_sym -> great_op .

    identifier      reduce using rule 37 (inequalities_sym -> great_op .)
    int_literal     reduce using rule 37 (inequalities_sym -> great_op .)
    float_literal   reduce using rule 37 (inequalities_sym -> great_op .)
    double_literal  reduce using rule 37 (inequalities_sym -> great_op .)
    char_literal    reduce using rule 37 (inequalities_sym -> great_op .)
    string_literal  reduce using rule 37 (inequalities_sym -> great_op .)


state 76

    (38) inequalities_sym -> and .

    identifier      reduce using rule 38 (inequalities_sym -> and .)
    int_literal     reduce using rule 38 (inequalities_sym -> and .)
    float_literal   reduce using rule 38 (inequalities_sym -> and .)
    double_literal  reduce using rule 38 (inequalities_sym -> and .)
    char_literal    reduce using rule 38 (inequalities_sym -> and .)
    string_literal  reduce using rule 38 (inequalities_sym -> and .)


state 77

    (39) inequalities_sym -> or .

    identifier      reduce using rule 39 (inequalities_sym -> or .)
    int_literal     reduce using rule 39 (inequalities_sym -> or .)
    float_literal   reduce using rule 39 (inequalities_sym -> or .)
    double_literal  reduce using rule 39 (inequalities_sym -> or .)
    char_literal    reduce using rule 39 (inequalities_sym -> or .)
    string_literal  reduce using rule 39 (inequalities_sym -> or .)


state 78

    (40) inequalities_sym -> bool_literal .

    identifier      reduce using rule 40 (inequalities_sym -> bool_literal .)
    int_literal     reduce using rule 40 (inequalities_sym -> bool_literal .)
    float_literal   reduce using rule 40 (inequalities_sym -> bool_literal .)
    double_literal  reduce using rule 40 (inequalities_sym -> bool_literal .)
    char_literal    reduce using rule 40 (inequalities_sym -> bool_literal .)
    string_literal  reduce using rule 40 (inequalities_sym -> bool_literal .)


state 79

    (41) inequalities_sym -> not_equal .

    identifier      reduce using rule 41 (inequalities_sym -> not_equal .)
    int_literal     reduce using rule 41 (inequalities_sym -> not_equal .)
    float_literal   reduce using rule 41 (inequalities_sym -> not_equal .)
    double_literal  reduce using rule 41 (inequalities_sym -> not_equal .)
    char_literal    reduce using rule 41 (inequalities_sym -> not_equal .)
    string_literal  reduce using rule 41 (inequalities_sym -> not_equal .)


state 80

    (54) arithmetic_expr -> identifier assign_op arithmetic_expr .
    (55) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (59) arithmetic_op -> . expo_op
    (60) arithmetic_op -> . mul_op
    (61) arithmetic_op -> . div_op
    (62) arithmetic_op -> . add_op
    (63) arithmetic_op -> . sub_op

    expo_op         reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    mul_op          reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    div_op          reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    add_op          reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    sub_op          reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    $end            reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    right_par_op    reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    semi_colon_statement reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    right_curl_op   reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    colon_statement reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)
    left_curl_op    reduce using rule 54 (arithmetic_expr -> identifier assign_op arithmetic_expr .)

  ! expo_op         [ shift and go to state 59 ]
  ! mul_op          [ shift and go to state 60 ]
  ! div_op          [ shift and go to state 61 ]
  ! add_op          [ shift and go to state 62 ]
  ! sub_op          [ shift and go to state 63 ]

    arithmetic_op                  shift and go to state 58

state 81

    (58) arithmetic_expr -> identifier assign_op function_call_statement .

    expo_op         reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    mul_op          reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    div_op          reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    add_op          reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    sub_op          reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    $end            reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    right_par_op    reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    semi_colon_statement reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    right_curl_op   reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    colon_statement reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)
    left_curl_op    reduce using rule 58 (arithmetic_expr -> identifier assign_op function_call_statement .)


state 82

    (56) arithmetic_expr -> left_par_op . arithmetic_expr right_par_op
    (45) function_parameter -> left_par_op . function_parameter right_par_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 7
    left_par_op     shift and go to state 82
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_expr                shift and go to state 43
    function_parameter             shift and go to state 42
    literal_or_identifier          shift and go to state 83
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 83

    (57) arithmetic_expr -> literal_or_identifier .
    (43) function_parameter -> literal_or_identifier .

  ! reduce/reduce conflict for expo_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for mul_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for div_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for add_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for sub_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for $end resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for right_par_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for semi_colon_statement resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for right_curl_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for colon_statement resolved using rule 43 (function_parameter -> literal_or_identifier .)
  ! reduce/reduce conflict for left_curl_op resolved using rule 43 (function_parameter -> literal_or_identifier .)
    comma_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    expo_op         reduce using rule 43 (function_parameter -> literal_or_identifier .)
    mul_op          reduce using rule 43 (function_parameter -> literal_or_identifier .)
    div_op          reduce using rule 43 (function_parameter -> literal_or_identifier .)
    add_op          reduce using rule 43 (function_parameter -> literal_or_identifier .)
    sub_op          reduce using rule 43 (function_parameter -> literal_or_identifier .)
    $end            reduce using rule 43 (function_parameter -> literal_or_identifier .)
    right_par_op    reduce using rule 43 (function_parameter -> literal_or_identifier .)
    semi_colon_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    right_curl_op   reduce using rule 43 (function_parameter -> literal_or_identifier .)
    colon_statement reduce using rule 43 (function_parameter -> literal_or_identifier .)
    left_curl_op    reduce using rule 43 (function_parameter -> literal_or_identifier .)

  ! expo_op         [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! mul_op          [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! div_op          [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! add_op          [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! sub_op          [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! $end            [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! right_par_op    [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! semi_colon_statement [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! right_curl_op   [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! colon_statement [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]
  ! left_curl_op    [ reduce using rule 57 (arithmetic_expr -> literal_or_identifier .) ]


state 84

    (46) function_parameter_list -> function_parameter comma_statement literal_or_identifier .

    comma_statement reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    $end            reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    right_par_op    reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    expo_op         reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    mul_op          reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    div_op          reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    add_op          reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    sub_op          reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    semi_colon_statement reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    right_curl_op   reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    colon_statement reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)
    left_curl_op    reduce using rule 46 (function_parameter_list -> function_parameter comma_statement literal_or_identifier .)


state 85

    (31) elif_block -> elif_statement inequalities . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 95


state 86

    (30) else_block -> else_statement left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 96
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 87

    (50) loop_statement -> while_statement inequalities left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 97
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 88

    (51) loop_statement -> for_statement arithmetic_statement semi_colon_statement . left_curl_op statement right_curl_op
    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement . inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (32) inequalities -> . literal_or_identifier inequalities_sym literal_or_identifier
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    left_curl_op    shift and go to state 98
    identifier      shift and go to state 54
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    inequalities                   shift and go to state 99
    literal_or_identifier          shift and go to state 53
    data_literal                   shift and go to state 33

state 89

    (55) arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .
    (55) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (59) arithmetic_op -> . expo_op
    (60) arithmetic_op -> . mul_op
    (61) arithmetic_op -> . div_op
    (62) arithmetic_op -> . add_op
    (63) arithmetic_op -> . sub_op

  ! shift/reduce conflict for expo_op resolved as shift
  ! shift/reduce conflict for mul_op resolved as shift
  ! shift/reduce conflict for div_op resolved as shift
  ! shift/reduce conflict for add_op resolved as shift
  ! shift/reduce conflict for sub_op resolved as shift
    $end            reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    right_par_op    reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    semi_colon_statement reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    right_curl_op   reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    colon_statement reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    left_curl_op    reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    expo_op         shift and go to state 59
    mul_op          shift and go to state 60
    div_op          shift and go to state 61
    add_op          shift and go to state 62
    sub_op          shift and go to state 63

  ! expo_op         [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! mul_op          [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! div_op          [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! add_op          [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! sub_op          [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]

    arithmetic_op                  shift and go to state 58

state 90

    (29) if_block -> if_statement inequalities left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 100
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 91

    (10) program -> type_declaration main_statement left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 101


state 92

    (11) program -> type_declaration main_statement left_par_op type_declaration . identifier right_par_op left_curl_op statement right_curl_op

    identifier      shift and go to state 102


state 93

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op . left_curl_op statement colon_statement statement right_curl_op

    left_curl_op    shift and go to state 103


state 94

    (32) inequalities -> literal_or_identifier inequalities_sym literal_or_identifier .

    right_par_op    reduce using rule 32 (inequalities -> literal_or_identifier inequalities_sym literal_or_identifier .)
    left_curl_op    reduce using rule 32 (inequalities -> literal_or_identifier inequalities_sym literal_or_identifier .)
    semi_colon_statement reduce using rule 32 (inequalities -> literal_or_identifier inequalities_sym literal_or_identifier .)


state 95

    (31) elif_block -> elif_statement inequalities left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 104
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 96

    (30) else_block -> else_statement left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 105


state 97

    (50) loop_statement -> while_statement inequalities left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 106


state 98

    (51) loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_statement           shift and go to state 11
    statement                      shift and go to state 107
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 99

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities . semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op

    semi_colon_statement shift and go to state 108


state 100

    (29) if_block -> if_statement inequalities left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 109


state 101

    (10) program -> type_declaration main_statement left_curl_op statement right_curl_op .

    $end            reduce using rule 10 (program -> type_declaration main_statement left_curl_op statement right_curl_op .)


state 102

    (11) program -> type_declaration main_statement left_par_op type_declaration identifier . right_par_op left_curl_op statement right_curl_op

    right_par_op    shift and go to state 110


state 103

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op . statement colon_statement statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 111
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 104

    (31) elif_block -> elif_statement inequalities left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 112


state 105

    (30) else_block -> else_statement left_curl_op statement right_curl_op .

    $end            reduce using rule 30 (else_block -> else_statement left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 30 (else_block -> else_statement left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 30 (else_block -> else_statement left_curl_op statement right_curl_op .)


state 106

    (50) loop_statement -> while_statement inequalities left_curl_op statement right_curl_op .

    $end            reduce using rule 50 (loop_statement -> while_statement inequalities left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 50 (loop_statement -> while_statement inequalities left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 50 (loop_statement -> while_statement inequalities left_curl_op statement right_curl_op .)


state 107

    (51) loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 113


state 108

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement . arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    identifier      shift and go to state 7
    left_par_op     shift and go to state 56
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_statement           shift and go to state 114
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 57
    data_literal                   shift and go to state 33

state 109

    (29) if_block -> if_statement inequalities left_curl_op statement right_curl_op .

    elif_statement  reduce using rule 29 (if_block -> if_statement inequalities left_curl_op statement right_curl_op .)
    else_statement  reduce using rule 29 (if_block -> if_statement inequalities left_curl_op statement right_curl_op .)
    $end            reduce using rule 29 (if_block -> if_statement inequalities left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 29 (if_block -> if_statement inequalities left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 29 (if_block -> if_statement inequalities left_curl_op statement right_curl_op .)


state 110

    (11) program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 115


state 111

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement . colon_statement statement right_curl_op

    colon_statement shift and go to state 116


state 112

    (31) elif_block -> elif_statement inequalities left_curl_op statement right_curl_op .

    $end            reduce using rule 31 (elif_block -> elif_statement inequalities left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 31 (elif_block -> elif_statement inequalities left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 31 (elif_block -> elif_statement inequalities left_curl_op statement right_curl_op .)


state 113

    (51) loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op .

    $end            reduce using rule 51 (loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 51 (loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 51 (loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op .)


state 114

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement . left_curl_op statement right_curl_op

    left_curl_op    shift and go to state 117


state 115

    (11) program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 118
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 116

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    statement                      shift and go to state 119
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    arithmetic_statement           shift and go to state 11
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 117

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op . statement right_curl_op
    (17) statement -> . function_call_statement
    (18) statement -> . conditional_statement
    (19) statement -> . loop_statement
    (20) statement -> . arithmetic_statement
    (21) statement -> . break_statement
    (22) statement -> . return_statement identifier
    (23) statement -> . return_statement
    (49) function_call_statement -> . function_parameter
    (24) conditional_statement -> . if_block
    (25) conditional_statement -> . if_block elif_block
    (26) conditional_statement -> . if_block else_block
    (27) conditional_statement -> . left_par_op inequalities right_par_op
    (28) conditional_statement -> . left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op
    (50) loop_statement -> . while_statement inequalities left_curl_op statement right_curl_op
    (51) loop_statement -> . for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op
    (52) loop_statement -> . for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op
    (53) arithmetic_statement -> . arithmetic_expr
    (43) function_parameter -> . literal_or_identifier
    (44) function_parameter -> . function_parameter_list
    (45) function_parameter -> . left_par_op function_parameter right_par_op
    (29) if_block -> . if_statement inequalities left_curl_op statement right_curl_op
    (54) arithmetic_expr -> . identifier assign_op arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (56) arithmetic_expr -> . left_par_op arithmetic_expr right_par_op
    (57) arithmetic_expr -> . literal_or_identifier
    (58) arithmetic_expr -> . identifier assign_op function_call_statement
    (47) literal_or_identifier -> . identifier
    (48) literal_or_identifier -> . data_literal
    (46) function_parameter_list -> . function_parameter comma_statement literal_or_identifier
    (64) data_literal -> . int_literal
    (65) data_literal -> . float_literal
    (66) data_literal -> . double_literal
    (67) data_literal -> . char_literal
    (68) data_literal -> . string_literal

    break_statement shift and go to state 12
    return_statement shift and go to state 13
    left_par_op     shift and go to state 6
    while_statement shift and go to state 26
    for_statement   shift and go to state 27
    if_statement    shift and go to state 32
    identifier      shift and go to state 7
    int_literal     shift and go to state 34
    float_literal   shift and go to state 35
    double_literal  shift and go to state 36
    char_literal    shift and go to state 37
    string_literal  shift and go to state 38

    arithmetic_statement           shift and go to state 11
    statement                      shift and go to state 120
    function_call_statement        shift and go to state 8
    conditional_statement          shift and go to state 9
    loop_statement                 shift and go to state 10
    function_parameter             shift and go to state 24
    if_block                       shift and go to state 25
    arithmetic_expr                shift and go to state 28
    literal_or_identifier          shift and go to state 30
    function_parameter_list        shift and go to state 31
    data_literal                   shift and go to state 33

state 118

    (11) program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 121


state 119

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement . right_curl_op

    right_curl_op   shift and go to state 122


state 120

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement . right_curl_op

    right_curl_op   shift and go to state 123


state 121

    (11) program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op .

    $end            reduce using rule 11 (program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op .)


state 122

    (28) conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op .

    $end            reduce using rule 28 (conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op .)
    right_curl_op   reduce using rule 28 (conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op .)
    colon_statement reduce using rule 28 (conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op .)


state 123

    (52) loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op .

    $end            reduce using rule 52 (loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op .)
    right_curl_op   reduce using rule 52 (loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op .)
    colon_statement reduce using rule 52 (loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for expo_op in state 89 resolved as shift
WARNING: shift/reduce conflict for mul_op in state 89 resolved as shift
WARNING: shift/reduce conflict for div_op in state 89 resolved as shift
WARNING: shift/reduce conflict for add_op in state 89 resolved as shift
WARNING: shift/reduce conflict for sub_op in state 89 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (function_parameter -> literal_or_identifier)
WARNING: rejected rule (arithmetic_expr -> literal_or_identifier) in state 30
WARNING: reduce/reduce conflict in state 44 resolved using rule (function_parameter -> literal_or_identifier)
WARNING: rejected rule (arithmetic_expr -> literal_or_identifier) in state 44
WARNING: reduce/reduce conflict in state 83 resolved using rule (function_parameter -> literal_or_identifier)
WARNING: rejected rule (arithmetic_expr -> literal_or_identifier) in state 83
