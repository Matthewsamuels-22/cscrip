# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'add_op and array assign_op bool_declaration bool_literal break_statement char_declaration char_literal class colon_statement comma_statement div_op do_statement double_declaration double_literal double_quotes elif_statement else_statement equivalent_op expo_op false_literal float_declaration float_literal for_statement full_stop_statement goto_statement great_op great_or_eq_op identifier if_statement in_statement int_declaration int_literal left_curl_op left_par_op less_op less_or_eq_op list main_statement mul_op not_equal or question_op return_statement right_curl_op right_par_op semi_colon_statement single_quotes string_declaration string_literal struct sub_op true_literal while_statement program_start : program\n                      | statement\n                      | data_structure\n                      data_structure : class\n                      | struct\n                      | list_structure\n                      | array\n                      |  list_structure : list empty : program : type_declaration main_statement left_curl_op statement right_curl_op\n               | type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op\n               type_declaration : int_declaration\n                        | float_declaration\n                        | double_declaration\n                        | string_declaration\n                        | char_declarationstatement : function_call_statement\n                 | conditional_statement\n                 | loop_statement\n                 | arithmetic_statement\n                 | break_statement\n                 | return_statement identifier\n                 | return_statement\n                 conditional_statement : if_block\n                                | if_block elif_block else_block\n                                | if_block else_block\n                                | left_par_op inequalities right_par_op\n                              | left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op\n                               if_block : if_statement inequalities left_curl_op statement right_curl_opelse_block : if_block else_statement left_curl_op statement right_curl_op\n                 | elif_block  else_statement left_curl_op statement right_curl_op elif_block : if_block elif_statement inequalities_sym left_curl_op statement right_curl_op\n                    | elif_blockinequalities : literal_or_identifier inequalities_sym  literal_or_identifierinequalities_sym : equivalent_op\n                        | less_or_eq_op\n                        | great_or_eq_op\n                        | less_op\n                        | great_op\n                        | and\n                        | or\n                        | bool_literal\n                        | not_equal\n                        |  function_parameter  : literal_or_identifier\n                            | function_parameter_list\n                            | left_par_op function_parameter right_par_op\n                             function_parameter_list : function_parameter comma_statement literal_or_identifier literal_or_identifier : identifier\n                             | data_literalfunction_call_statement : function_parameter  loop_statement : while_statement inequalities left_curl_op statement right_curl_op\n                      |  for_statement semi_colon_statement semi_colon_statement left_curl_op statement right_curl_op\n                      | for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op\n                      arithmetic_statement : arithmetic_exprarithmetic_expr : identifier assign_op arithmetic_expr\n                       | arithmetic_expr arithmetic_op arithmetic_expr\n                       | left_par_op arithmetic_expr right_par_op\n                       | literal_or_identifier\n                       | identifier assign_op function_call_statementarithmetic_op : expo_op\n                    | mul_op\n                    | div_op\n                    | add_op\n                     | sub_op\n                     data_literal : int_literal\n                    | float_literal\n                    | double_literal\n                    | char_literal\n                    | string_literal'

_lr_action_items = {'break_statement': (
[0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, ]),
                    'return_statement': ([0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                         [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ]), 'class': ([0, ], [14, ]),
                    'struct': ([0, ], [15, ]), 'array': ([0, ], [17, ]), '$end': (
    [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 45, 49, 52,
     56, 66, 67, 68, 79, 80, 82, 83, 88, 93, 106, 112, 115, 119, 120, 121, 130, 131, 132, ],
    [-8, 0, -1, -2, -3, -50, -18, -19, -20, -21, -22, -24, -4, -5, -6, -7, -52, -25, -56, -9, -46, -47, -51, -67, -68,
     -69, -70, -71, -23, -27, -50, -60, -28, -48, -59, -57, -61, -46, -49, -26, -58, -11, -53, -30, -31, -32, -54, -12,
     -29, -55, ]), 'int_declaration': ([0, 65, ], [18, 18, ]), 'float_declaration': ([0, 65, ], [19, 19, ]),
                    'double_declaration': ([0, 65, ], [20, 20, ]), 'string_declaration': ([0, 65, ], [21, 21, ]),
                    'char_declaration': ([0, 65, ], [22, 22, ]), 'left_par_op': (
    [0, 6, 26, 38, 39, 44, 55, 57, 58, 59, 60, 61, 62, 64, 81, 90, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [6, 39, 55, 65, 39, 81, 55, 55, -62, -63, -64, -65, -66, 6, 81, 6, 6, 6, 6, 6, 6, 6, 55, 6, 6, 6, ]),
                    'while_statement': ([0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                        [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, ]), 'for_statement': (
    [0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ], [26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, ]),
                    'list': ([0, ], [28, ]), 'if_statement': (
    [0, 24, 48, 64, 90, 94, 100, 101, 103, 108, 109, 115, 123, 124, 125, 126, ],
    [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, -30, 31, 31, -33, 31, ]), 'identifier': (
    [0, 6, 7, 13, 18, 19, 20, 21, 22, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60,
     61, 62, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 96, 100, 101, 103, 108, 109, 114, 123, 124,
     126, ],
    [7, 7, -50, 45, -13, -14, -15, -16, -17, 52, 7, 52, -51, -67, -68, -69, -70, -71, 7, -45, 7, 52, -45, -50, 7, 7,
     -62, -63, -64, -65, -66, 7, 52, -36, -37, -38, -39, -40, -41, -42, -43, -44, 7, 7, 52, 7, 107, 7, 7, 7, 7, 7, 7, 7,
     7, 7, ]), 'int_literal': (
    [0, 6, 7, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71,
     72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [33, 33, -50, 33, 33, 33, -51, -67, -68, -69, -70, -71, 33, -45, 33, 33, -45, -50, 33, 33, -62, -63, -64, -65, -66,
     33, 33, -36, -37, -38, -39, -40, -41, -42, -43, -44, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, ]),
                    'float_literal': (
                    [0, 6, 7, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 61, 62,
                     64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124,
                     126, ],
                    [34, 34, -50, 34, 34, 34, -51, -67, -68, -69, -70, -71, 34, -45, 34, 34, -45, -50, 34, 34, -62, -63,
                     -64, -65, -66, 34, 34, -36, -37, -38, -39, -40, -41, -42, -43, -44, 34, 34, 34, 34, 34, 34, 34, 34,
                     34, 34, 34, 34, 34, ]), 'double_literal': (
    [0, 6, 7, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71,
     72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [35, 35, -50, 35, 35, 35, -51, -67, -68, -69, -70, -71, 35, -45, 35, 35, -45, -50, 35, 35, -62, -63, -64, -65, -66,
     35, 35, -36, -37, -38, -39, -40, -41, -42, -43, -44, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, ]),
                    'char_literal': (
                    [0, 6, 7, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 61, 62,
                     64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124,
                     126, ],
                    [36, 36, -50, 36, 36, 36, -51, -67, -68, -69, -70, -71, 36, -45, 36, 36, -45, -50, 36, 36, -62, -63,
                     -64, -65, -66, 36, 36, -36, -37, -38, -39, -40, -41, -42, -43, -44, 36, 36, 36, 36, 36, 36, 36, 36,
                     36, 36, 36, 36, 36, ]), 'string_literal': (
    [0, 6, 7, 25, 26, 31, 32, 33, 34, 35, 36, 37, 39, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71,
     72, 73, 74, 75, 76, 77, 78, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [37, 37, -50, 37, 37, 37, -51, -67, -68, -69, -70, -71, 37, -45, 37, 37, -45, -50, 37, 37, -62, -63, -64, -65, -66,
     37, 37, -36, -37, -38, -39, -40, -41, -42, -43, -44, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, ]),
                    'main_statement': ([5, 18, 19, 20, 21, 22, ], [38, -13, -14, -15, -16, -17, ]),
                    'assign_op': ([7, ], [44, ]), 'comma_statement': (
    [7, 23, 29, 30, 32, 33, 34, 35, 36, 37, 41, 43, 52, 67, 82, 83, ],
    [-50, 46, -46, -47, -51, -67, -68, -69, -70, -71, 46, -46, -50, -48, -46, -49, ]), 'expo_op': (
    [7, 23, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, ],
    [-50, -52, 58, -60, -47, -51, -67, -68, -69, -70, -71, 58, -60, -50, -60, -48, -59, 58, -61, -46, -49, 58, ]),
                    'mul_op': (
                    [7, 23, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, ],
                    [-50, -52, 59, -60, -47, -51, -67, -68, -69, -70, -71, 59, -60, -50, -60, -48, -59, 59, -61, -46,
                     -49, 59, ]), 'div_op': (
    [7, 23, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, ],
    [-50, -52, 60, -60, -47, -51, -67, -68, -69, -70, -71, 60, -60, -50, -60, -48, -59, 60, -61, -46, -49, 60, ]),
                    'add_op': (
                    [7, 23, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, ],
                    [-50, -52, 61, -60, -47, -51, -67, -68, -69, -70, -71, 61, -60, -50, -60, -48, -59, 61, -61, -46,
                     -49, 61, ]), 'sub_op': (
    [7, 23, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, ],
    [-50, -52, 62, -60, -47, -51, -67, -68, -69, -70, -71, 62, -60, -50, -60, -48, -59, 62, -61, -46, -49, 62, ]),
                    'equivalent_op': ([7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ],
                                      [-50, -51, -67, -68, -69, -70, -71, 70, 70, -50, 70, ]), 'less_or_eq_op': (
    [7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ], [-50, -51, -67, -68, -69, -70, -71, 71, 71, -50, 71, ]),
                    'great_or_eq_op': ([7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ],
                                       [-50, -51, -67, -68, -69, -70, -71, 72, 72, -50, 72, ]), 'less_op': (
    [7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ], [-50, -51, -67, -68, -69, -70, -71, 73, 73, -50, 73, ]),
                    'great_op': ([7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ],
                                 [-50, -51, -67, -68, -69, -70, -71, 74, 74, -50, 74, ]), 'and': (
    [7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ], [-50, -51, -67, -68, -69, -70, -71, 75, 75, -50, 75, ]), 'or': (
    [7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ], [-50, -51, -67, -68, -69, -70, -71, 76, 76, -50, 76, ]),
                    'bool_literal': ([7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ],
                                     [-50, -51, -67, -68, -69, -70, -71, 77, 77, -50, 77, ]), 'not_equal': (
    [7, 32, 33, 34, 35, 36, 37, 43, 51, 52, 84, ], [-50, -51, -67, -68, -69, -70, -71, 78, 78, -50, 78, ]),
                    'right_par_op': (
                    [7, 23, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 52, 56, 67, 68, 79, 80, 82, 83, 93, 98,
                     107, ],
                    [-50, -52, -46, -47, -51, -67, -68, -69, -70, -71, 66, 67, 68, -46, -50, -60, -48, -59, -57, -61,
                     -46, -49, -58, -35, 116, ]), 'semi_colon_statement': (
    [7, 23, 26, 27, 30, 32, 33, 34, 35, 36, 37, 52, 53, 54, 56, 67, 68, 79, 80, 82, 83, 93, 98, 104, ],
    [-50, -52, 53, -56, -47, -51, -67, -68, -69, -70, -71, -50, 91, 92, -60, -48, -59, -57, -61, -46, -49, -58, -35,
     114, ]), 'right_curl_op': (
    [7, 8, 9, 10, 11, 12, 13, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 45, 49, 52, 56, 66, 67, 68, 79, 80, 82, 83,
     88, 93, 95, 102, 105, 110, 111, 112, 113, 115, 118, 119, 120, 121, 127, 128, 129, 131, 132, ],
    [-50, -18, -19, -20, -21, -22, -24, -52, -25, -56, -46, -47, -51, -67, -68, -69, -70, -71, -23, -27, -50, -60, -28,
     -48, -59, -57, -61, -46, -49, -26, -58, 106, 112, 115, 119, 120, -53, 121, -30, 125, -31, -32, -54, 130, 131, 132,
     -29, -55, ]), 'colon_statement': (
    [7, 8, 9, 10, 11, 12, 13, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 45, 49, 52, 56, 66, 67, 68, 79, 80, 82, 83,
     88, 93, 112, 115, 117, 119, 120, 121, 131, 132, ],
    [-50, -18, -19, -20, -21, -22, -24, -52, -25, -56, -46, -47, -51, -67, -68, -69, -70, -71, -23, -27, -50, -60, -28,
     -48, -59, -57, -61, -46, -49, -26, -58, -53, -30, 124, -31, -32, -54, -29, -55, ]), 'left_curl_op': (
    [7, 23, 27, 30, 32, 33, 34, 35, 36, 37, 38, 50, 52, 56, 63, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82,
     83, 84, 85, 89, 91, 93, 97, 98, 99, 116, 122, ],
    [-50, -52, -56, -47, -51, -67, -68, -69, -70, -71, 64, 90, -50, -60, 94, -48, -59, -36, -37, -38, -39, -40, -41,
     -42, -43, -44, -57, -61, -46, -49, -45, 100, 101, 103, -58, 108, -35, 109, 123, 126, ]),
                    'elif_statement': ([47, 86, 115, ], [84, 84, -30, ]),
                    'else_statement': ([47, 48, 86, 87, 115, 125, ], [85, 89, 85, 89, -30, -33, ]),
                    'question_op': ([66, ], [97, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_start': ([0, ], [1, ]), 'program': ([0, ], [2, ]), 'statement': (
[0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ], [3, 95, 102, 105, 110, 111, 113, 117, 118, 127, 128, 129, ]),
                  'data_structure': ([0, ], [4, ]), 'type_declaration': ([0, 65, ], [5, 96, ]),
                  'function_call_statement': ([0, 44, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                              [8, 80, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, ]), 'conditional_statement': (
    [0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ]),
                  'loop_statement': ([0, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ]), 'arithmetic_statement': (
    [0, 26, 64, 90, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [11, 54, 11, 11, 11, 11, 11, 11, 11, 11, 122, 11, 11, 11, ]), 'list_structure': ([0, ], [16, ]),
                  'function_parameter': ([0, 6, 39, 44, 64, 81, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                         [23, 41, 41, 23, 23, 41, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, ]),
                  'if_block': ([0, 24, 48, 64, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                               [24, 47, 86, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, ]), 'arithmetic_expr': (
    [0, 6, 26, 39, 44, 55, 57, 64, 81, 90, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [27, 42, 27, 42, 79, 42, 93, 27, 42, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, ]), 'literal_or_identifier': (
    [0, 6, 25, 26, 31, 39, 44, 46, 55, 57, 64, 69, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124, 126, ],
    [29, 43, 51, 56, 51, 29, 82, 83, 56, 56, 29, 98, 82, 29, 51, 29, 29, 29, 29, 29, 29, 56, 29, 29, 29, ]),
                  'function_parameter_list': ([0, 6, 39, 44, 64, 81, 90, 94, 100, 101, 103, 108, 109, 123, 124, 126, ],
                                              [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, ]),
                  'data_literal': (
                  [0, 6, 25, 26, 31, 39, 44, 46, 55, 57, 64, 69, 81, 90, 92, 94, 100, 101, 103, 108, 109, 114, 123, 124,
                   126, ],
                  [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                   32, ]), 'inequalities': ([6, 25, 31, 92, ], [40, 50, 63, 104, ]),
                  'elif_block': ([24, 48, ], [48, 87, ]), 'else_block': ([24, 48, ], [49, 88, ]),
                  'arithmetic_op': ([27, 42, 79, 93, ], [57, 57, 57, 57, ]),
                  'inequalities_sym': ([43, 51, 84, ], [69, 69, 99, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program_start", "S'", 1, None, None, None),
    ('program_start -> program', 'program_start', 1, 'p_program_start', 'py_parser.py', 8),
    ('program_start -> statement', 'program_start', 1, 'p_program_start', 'py_parser.py', 9),
    ('program_start -> data_structure', 'program_start', 1, 'p_program_start', 'py_parser.py', 10),
    ('data_structure -> class', 'data_structure', 1, 'p_data_structure', 'py_parser.py', 16),
    ('data_structure -> struct', 'data_structure', 1, 'p_data_structure', 'py_parser.py', 17),
    ('data_structure -> list_structure', 'data_structure', 1, 'p_data_structure', 'py_parser.py', 18),
    ('data_structure -> array', 'data_structure', 1, 'p_data_structure', 'py_parser.py', 19),
    ('data_structure -> <empty>', 'data_structure', 0, 'p_data_structure', 'py_parser.py', 20),
    ('list_structure -> list', 'list_structure', 1, 'p_list_structure', 'py_parser.py', 25),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'py_parser.py', 30),
    ('program -> type_declaration main_statement left_curl_op statement right_curl_op', 'program', 5, 'p_program',
     'py_parser.py', 35),
    (
    'program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op',
    'program', 9, 'p_program', 'py_parser.py', 36),
    ('type_declaration -> int_declaration', 'type_declaration', 1, 'p_type_declaration', 'py_parser.py', 45),
    ('type_declaration -> float_declaration', 'type_declaration', 1, 'p_type_declaration', 'py_parser.py', 46),
    ('type_declaration -> double_declaration', 'type_declaration', 1, 'p_type_declaration', 'py_parser.py', 47),
    ('type_declaration -> string_declaration', 'type_declaration', 1, 'p_type_declaration', 'py_parser.py', 48),
    ('type_declaration -> char_declaration', 'type_declaration', 1, 'p_type_declaration', 'py_parser.py', 49),
    ('statement -> function_call_statement', 'statement', 1, 'p_statement', 'py_parser.py', 54),
    ('statement -> conditional_statement', 'statement', 1, 'p_statement', 'py_parser.py', 55),
    ('statement -> loop_statement', 'statement', 1, 'p_statement', 'py_parser.py', 56),
    ('statement -> arithmetic_statement', 'statement', 1, 'p_statement', 'py_parser.py', 57),
    ('statement -> break_statement', 'statement', 1, 'p_statement', 'py_parser.py', 58),
    ('statement -> return_statement identifier', 'statement', 2, 'p_statement', 'py_parser.py', 59),
    ('statement -> return_statement', 'statement', 1, 'p_statement', 'py_parser.py', 60),
    ('conditional_statement -> if_block', 'conditional_statement', 1, 'p_conditional_statement', 'py_parser.py', 66),
    ('conditional_statement -> if_block elif_block else_block', 'conditional_statement', 3, 'p_conditional_statement',
     'py_parser.py', 67),
    ('conditional_statement -> if_block else_block', 'conditional_statement', 2, 'p_conditional_statement',
     'py_parser.py', 68),
    ('conditional_statement -> left_par_op inequalities right_par_op', 'conditional_statement', 3,
     'p_conditional_statement', 'py_parser.py', 69),
    (
    'conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op',
    'conditional_statement', 9, 'p_conditional_statement', 'py_parser.py', 70),
    ('if_block -> if_statement inequalities left_curl_op statement right_curl_op', 'if_block', 5, 'p_if_block',
     'py_parser.py', 85),
    ('else_block -> if_block else_statement left_curl_op statement right_curl_op', 'else_block', 5, 'p_else_block',
     'py_parser.py', 91),
    ('else_block -> elif_block else_statement left_curl_op statement right_curl_op', 'else_block', 5, 'p_else_block',
     'py_parser.py', 92),
    ('elif_block -> if_block elif_statement inequalities_sym left_curl_op statement right_curl_op', 'elif_block', 6,
     'p_elif_block', 'py_parser.py', 97),
    ('elif_block -> elif_block', 'elif_block', 1, 'p_elif_block', 'py_parser.py', 98),
    (
    'inequalities -> literal_or_identifier inequalities_sym literal_or_identifier', 'inequalities', 3, 'p_inequalities',
    'py_parser.py', 103),
    ('inequalities_sym -> equivalent_op', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 112),
    ('inequalities_sym -> less_or_eq_op', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 113),
    ('inequalities_sym -> great_or_eq_op', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 114),
    ('inequalities_sym -> less_op', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 115),
    ('inequalities_sym -> great_op', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 116),
    ('inequalities_sym -> and', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 117),
    ('inequalities_sym -> or', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 118),
    ('inequalities_sym -> bool_literal', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 119),
    ('inequalities_sym -> not_equal', 'inequalities_sym', 1, 'p_inequalities_sym', 'py_parser.py', 120),
    ('inequalities_sym -> <empty>', 'inequalities_sym', 0, 'p_inequalities_sym', 'py_parser.py', 121),
    ('function_parameter -> literal_or_identifier', 'function_parameter', 1, 'p_function_parameter', 'py_parser.py',
     126),
    ('function_parameter -> function_parameter_list', 'function_parameter', 1, 'p_function_parameter', 'py_parser.py',
     127),
    ('function_parameter -> left_par_op function_parameter right_par_op', 'function_parameter', 3,
     'p_function_parameter', 'py_parser.py', 128),
    (
    'function_parameter_list -> function_parameter comma_statement literal_or_identifier', 'function_parameter_list', 3,
    'p_function_parameter_list', 'py_parser.py', 137),
    ('literal_or_identifier -> identifier', 'literal_or_identifier', 1, 'p_literal_or_identifier', 'py_parser.py', 142),
    ('literal_or_identifier -> data_literal', 'literal_or_identifier', 1, 'p_literal_or_identifier', 'py_parser.py',
     143),
    ('function_call_statement -> function_parameter', 'function_call_statement', 1, 'p_function_call_statement',
     'py_parser.py', 148),
    ('loop_statement -> while_statement inequalities left_curl_op statement right_curl_op', 'loop_statement', 5,
     'p_loop_statement', 'py_parser.py', 153),
    ('loop_statement -> for_statement semi_colon_statement semi_colon_statement left_curl_op statement right_curl_op',
     'loop_statement', 6, 'p_loop_statement', 'py_parser.py', 154),
    (
    'loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op',
    'loop_statement', 9, 'p_loop_statement', 'py_parser.py', 155),
    ('arithmetic_statement -> arithmetic_expr', 'arithmetic_statement', 1, 'p_arithmetic_statement', 'py_parser.py',
     166),
    ('arithmetic_expr -> identifier assign_op arithmetic_expr', 'arithmetic_expr', 3, 'p_arithmetic_expr',
     'py_parser.py', 171),
    ('arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr', 'arithmetic_expr', 3, 'p_arithmetic_expr',
     'py_parser.py', 172),
    ('arithmetic_expr -> left_par_op arithmetic_expr right_par_op', 'arithmetic_expr', 3, 'p_arithmetic_expr',
     'py_parser.py', 173),
    ('arithmetic_expr -> literal_or_identifier', 'arithmetic_expr', 1, 'p_arithmetic_expr', 'py_parser.py', 174),
    ('arithmetic_expr -> identifier assign_op function_call_statement', 'arithmetic_expr', 3, 'p_arithmetic_expr',
     'py_parser.py', 175),
    ('arithmetic_op -> expo_op', 'arithmetic_op', 1, 'p_arithmetic_op', 'py_parser.py', 185),
    ('arithmetic_op -> mul_op', 'arithmetic_op', 1, 'p_arithmetic_op', 'py_parser.py', 186),
    ('arithmetic_op -> div_op', 'arithmetic_op', 1, 'p_arithmetic_op', 'py_parser.py', 187),
    ('arithmetic_op -> add_op', 'arithmetic_op', 1, 'p_arithmetic_op', 'py_parser.py', 188),
    ('arithmetic_op -> sub_op', 'arithmetic_op', 1, 'p_arithmetic_op', 'py_parser.py', 189),
    ('data_literal -> int_literal', 'data_literal', 1, 'p_data_literal', 'py_parser.py', 195),
    ('data_literal -> float_literal', 'data_literal', 1, 'p_data_literal', 'py_parser.py', 196),
    ('data_literal -> double_literal', 'data_literal', 1, 'p_data_literal', 'py_parser.py', 197),
    ('data_literal -> char_literal', 'data_literal', 1, 'p_data_literal', 'py_parser.py', 198),
    ('data_literal -> string_literal', 'data_literal', 1, 'p_data_literal', 'py_parser.py', 199),
]
