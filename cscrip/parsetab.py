
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocleft_par_opright_par_opleftexpo_opleftmul_opdiv_opleftadd_opsub_opnonassocassign_opadd_op and array assign_op bool_declaration bool_literal break_statement char_declaration char_literal class colon_statement comma_statement decrement div_op do_statement double_declaration double_literal double_quotes elif_statement else_statement equivalent_op expo_op false_literal float_declaration float_literal for_statement full_stop_statement goto_statement great_op great_or_eq_op identifier if_statement in_statement increment int_declaration int_literal left_curl_op left_par_op left_square_op less_op less_or_eq_op list main_statement mul_op not_equal or print_statement question_op return_statement right_curl_op right_par_op right_square_op semi_colon_statement single_quotes string_declaration string_literal struct sub_op true_literal while_statement program_start : program\n                      | statement\n                      | data_structure\n                      data_structure : class\n                      | struct\n                      | list_structure\n                      | array\n                      | empty list_structure : listprogram : type_declaration main_statement left_curl_op statement right_curl_op\n               | type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op\n               type_declaration : int_declaration\n                        | float_declaration\n                        | double_declaration\n                        | string_declaration\n                        | char_declarationstatement : function_call_statement\n                 | conditional_statement\n                 | loop_statement\n                 | arithmetic_statement\n                 | break_state\n                 | return_state\n                 | function_declaration_statement\n                 | printed_statement\n                 break_state : break_statementprinted_statement : print_statement literal_or_identifier\n                         | print_statement literal_or_identifier comma_statement identifierreturn_state : return_statement literal_or_identifier\n                    | return_statement statementconditional_statement : if_block\n                                | if_block elif_block\n                                | if_block else_block\n                                | left_par_op inequalities right_par_op\n                              | left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op\n                             if_block : if_statement inequalities left_curl_op statement right_curl_opelse_block : else_statement left_curl_op statement right_curl_op\n                  elif_block : elif_statement inequalities left_curl_op statement right_curl_opinequalities : literal_or_identifier inequalities_sym  literal_or_identifierinequalities_sym : equivalent_op\n                        | less_or_eq_op\n                        | great_or_eq_op\n                        | less_op\n                        | great_op\n                        | and\n                        | or\n                        | bool_literal\n                        | not_equal\n                        | function_declaration_statement : literal_or_identifier left_par_op function_parameter right_par_op left_curl_op statement right_curl_op function_parameter  : literal_or_identifier\n                            | literal_or_identifier comma_statement function_parameter\n                            literal_or_identifier : identifier\n                             | data_literalfunction_call_statement : literal_or_identifier left_par_op function_parameter right_par_op  loop_statement : while_statement inequalities left_curl_op statement right_curl_op\n                      | for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op\n                      | for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op\n                      arithmetic_statement : arithmetic_expr\n                            | unary_opunary_op : identifier increment\n                | identifier decrementarithmetic_expr : identifier assign_op arithmetic_expr\n                       | arithmetic_expr arithmetic_op arithmetic_expr\n                       | left_par_op arithmetic_expr right_par_op\n                       | literal_or_identifier\n                       | identifier assign_op function_call_statementarithmetic_op : expo_op\n                    | mul_op\n                    | div_op\n                    | add_op\n                     | sub_op\n                     data_literal : int_literal\n                    | float_literal\n                    | double_literal\n                    | char_literal\n                    | string_literal empty : '
    
_lr_action_items = {'class':([0,],[16,]),'struct':([0,],[17,]),'array':([0,],[19,]),'int_declaration':([0,74,],[21,21,]),'float_declaration':([0,74,],[22,22,]),'double_declaration':([0,74,],[23,23,]),'string_declaration':([0,74,],[24,24,]),'char_declaration':([0,74,],[25,25,]),'left_par_op':([0,6,7,26,29,33,36,38,39,40,41,42,43,44,48,49,63,64,65,66,67,68,69,73,89,93,94,98,106,109,115,118,123,132,133,135,],[6,44,-52,52,44,6,-53,-72,-73,-74,-75,-76,74,44,-52,44,44,-67,-68,-69,-70,-71,52,6,103,6,6,6,6,6,6,6,44,6,6,6,]),'while_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'for_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),'break_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[32,32,32,32,32,32,32,32,32,32,32,32,32,]),'return_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[33,33,33,33,33,33,33,33,33,33,33,33,33,]),'print_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[34,34,34,34,34,34,34,34,34,34,34,34,34,]),'list':([0,],[35,]),'$end':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,26,27,30,31,32,35,36,38,39,40,41,42,48,50,51,53,54,59,62,69,70,71,75,76,87,88,89,96,105,111,113,120,121,124,127,129,130,134,139,140,141,],[-77,0,-1,-2,-3,-52,-17,-18,-19,-20,-21,-22,-23,-24,-4,-5,-6,-7,-8,-65,-30,-58,-59,-25,-9,-53,-72,-73,-74,-75,-76,-52,-60,-61,-31,-32,-52,-65,-28,-29,-26,-33,-64,-62,-66,-65,-63,-54,-27,-10,-36,-55,-35,-54,-37,-56,-49,-11,-34,-57,]),'identifier':([0,6,21,22,23,24,25,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,97,98,100,103,104,106,109,115,118,123,132,133,135,],[7,48,-12,-13,-14,-15,-16,59,61,7,59,-53,59,-72,-73,-74,-75,-76,48,-48,-52,48,59,59,-48,-52,48,-67,-68,-69,-70,-71,7,59,-39,-40,-41,-42,-43,-44,-45,-46,-47,7,7,59,111,7,114,59,59,7,7,7,7,61,7,7,7,]),'if_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[37,37,37,37,37,37,37,37,37,37,37,37,37,]),'int_literal':([0,6,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[38,38,38,38,38,38,-53,38,-72,-73,-74,-75,-76,38,-48,-52,38,38,38,-48,-52,38,-67,-68,-69,-70,-71,38,38,-39,-40,-41,-42,-43,-44,-45,-46,-47,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'float_literal':([0,6,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[39,39,39,39,39,39,-53,39,-72,-73,-74,-75,-76,39,-48,-52,39,39,39,-48,-52,39,-67,-68,-69,-70,-71,39,39,-39,-40,-41,-42,-43,-44,-45,-46,-47,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'double_literal':([0,6,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[40,40,40,40,40,40,-53,40,-72,-73,-74,-75,-76,40,-48,-52,40,40,40,-48,-52,40,-67,-68,-69,-70,-71,40,40,-39,-40,-41,-42,-43,-44,-45,-46,-47,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'char_literal':([0,6,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[41,41,41,41,41,41,-53,41,-72,-73,-74,-75,-76,41,-48,-52,41,41,41,-48,-52,41,-67,-68,-69,-70,-71,41,41,-39,-40,-41,-42,-43,-44,-45,-46,-47,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'string_literal':([0,6,28,29,33,34,36,37,38,39,40,41,42,44,47,48,49,52,55,58,59,63,64,65,66,67,68,73,77,78,79,80,81,82,83,84,85,86,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[42,42,42,42,42,42,-53,42,-72,-73,-74,-75,-76,42,-48,-52,42,42,42,-48,-52,42,-67,-68,-69,-70,-71,42,42,-39,-40,-41,-42,-43,-44,-45,-46,-47,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'main_statement':([5,21,22,23,24,25,],[43,-12,-13,-14,-15,-16,]),'expo_op':([7,26,30,36,38,39,40,41,42,46,47,48,61,62,69,76,87,88,89,96,127,],[-52,-65,64,-53,-72,-73,-74,-75,-76,64,-65,-52,-52,-65,-65,-64,-62,-66,-65,64,-54,]),'mul_op':([7,26,30,36,38,39,40,41,42,46,47,48,61,62,69,76,87,88,89,96,127,],[-52,-65,65,-53,-72,-73,-74,-75,-76,65,-65,-52,-52,-65,-65,-64,-62,-66,-65,65,-54,]),'div_op':([7,26,30,36,38,39,40,41,42,46,47,48,61,62,69,76,87,88,89,96,127,],[-52,-65,66,-53,-72,-73,-74,-75,-76,66,-65,-52,-52,-65,-65,-64,-62,-66,-65,66,-54,]),'add_op':([7,26,30,36,38,39,40,41,42,46,47,48,61,62,69,76,87,88,89,96,127,],[-52,-65,67,-53,-72,-73,-74,-75,-76,67,-65,-52,-52,-65,-65,-64,-62,-66,-65,67,-54,]),'sub_op':([7,26,30,36,38,39,40,41,42,46,47,48,61,62,69,76,87,88,89,96,127,],[-52,-65,68,-53,-72,-73,-74,-75,-76,68,-65,-52,-52,-65,-65,-64,-62,-66,-65,68,-54,]),'right_curl_op':([7,8,9,10,11,12,13,14,15,26,27,30,31,32,36,38,39,40,41,42,48,50,51,53,54,59,62,69,70,71,75,76,87,88,89,96,99,105,107,108,111,112,119,120,121,122,124,127,128,129,130,134,136,137,138,140,141,],[-52,-17,-18,-19,-20,-21,-22,-23,-24,-65,-30,-58,-59,-25,-53,-72,-73,-74,-75,-76,-52,-60,-61,-31,-32,-52,-65,-28,-29,-26,-33,-64,-62,-66,-65,-63,113,-54,120,121,-27,124,129,-36,-55,130,-35,-54,134,-37,-56,-49,139,140,141,-34,-57,]),'colon_statement':([7,8,9,10,11,12,13,14,15,26,27,30,31,32,36,38,39,40,41,42,48,50,51,53,54,59,62,69,70,71,75,76,87,88,89,96,105,111,120,121,124,126,127,129,130,134,140,141,],[-52,-17,-18,-19,-20,-21,-22,-23,-24,-65,-30,-58,-59,-25,-53,-72,-73,-74,-75,-76,-52,-60,-61,-31,-32,-52,-65,-28,-29,-26,-33,-64,-62,-66,-65,-63,-54,-27,-36,-55,-35,133,-54,-37,-56,-49,-34,-57,]),'assign_op':([7,48,61,],[49,49,49,]),'increment':([7,61,],[50,50,]),'decrement':([7,61,],[51,51,]),'elif_statement':([27,124,],[55,-35,]),'else_statement':([27,124,],[56,-35,]),'semi_colon_statement':([30,31,36,38,39,40,41,42,48,50,51,59,60,61,62,76,87,88,89,96,102,110,127,],[-58,-59,-53,-72,-73,-74,-75,-76,-52,-60,-61,-52,95,-52,-65,-64,-62,-66,-65,-63,-38,123,-54,]),'left_curl_op':([30,31,36,38,39,40,41,42,43,48,50,51,56,57,59,61,62,72,76,87,88,89,92,95,96,101,102,105,125,127,131,],[-58,-59,-53,-72,-73,-74,-75,-76,73,-52,-60,-61,93,94,-52,-52,-65,98,-64,-62,-66,-65,106,109,-63,115,-38,118,132,-54,135,]),'equivalent_op':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,78,-52,78,-52,]),'less_or_eq_op':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,79,-52,79,-52,]),'great_or_eq_op':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,80,-52,80,-52,]),'less_op':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,81,-52,81,-52,]),'great_op':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,82,-52,82,-52,]),'and':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,83,-52,83,-52,]),'or':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,84,-52,84,-52,]),'bool_literal':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,85,-52,85,-52,]),'not_equal':([36,38,39,40,41,42,47,48,58,59,],[-53,-72,-73,-74,-75,-76,86,-52,86,-52,]),'right_par_op':([36,38,39,40,41,42,45,46,47,48,59,62,76,87,88,89,90,91,96,102,114,116,117,127,],[-53,-72,-73,-74,-75,-76,75,76,-65,-52,-52,-65,-64,-62,-66,-65,-50,105,-63,-38,125,127,-51,-54,]),'comma_statement':([36,38,39,40,41,42,59,71,90,],[-53,-72,-73,-74,-75,-76,-52,97,104,]),'question_op':([75,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_start':([0,],[1,]),'program':([0,],[2,]),'statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[3,70,99,107,108,112,119,122,126,128,136,137,138,]),'data_structure':([0,],[4,]),'type_declaration':([0,74,],[5,100,]),'function_call_statement':([0,33,49,73,93,94,98,106,109,115,118,132,133,135,],[8,8,88,8,8,8,8,8,8,8,8,8,8,8,]),'conditional_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'loop_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'arithmetic_statement':([0,29,33,73,93,94,98,106,109,115,118,123,132,133,135,],[11,60,11,11,11,11,11,11,11,11,11,131,11,11,11,]),'break_state':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'return_state':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'function_declaration_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'printed_statement':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'list_structure':([0,],[18,]),'empty':([0,],[20,]),'literal_or_identifier':([0,6,28,29,33,34,37,44,49,52,55,63,73,77,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[26,47,58,62,69,71,58,62,89,90,58,62,26,102,26,26,58,26,90,90,26,26,26,26,62,26,26,26,]),'if_block':([0,33,73,93,94,98,106,109,115,118,132,133,135,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'arithmetic_expr':([0,6,29,33,44,49,63,73,93,94,98,106,109,115,118,123,132,133,135,],[30,46,30,30,46,87,96,30,30,30,30,30,30,30,30,30,30,30,30,]),'unary_op':([0,29,33,73,93,94,98,106,109,115,118,123,132,133,135,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'data_literal':([0,6,28,29,33,34,37,44,49,52,55,63,73,77,93,94,95,98,103,104,106,109,115,118,123,132,133,135,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'inequalities':([6,28,37,55,95,],[45,57,72,92,110,]),'elif_block':([27,],[53,]),'else_block':([27,],[54,]),'arithmetic_op':([30,46,87,96,],[63,63,63,63,]),'inequalities_sym':([47,58,],[77,77,]),'function_parameter':([52,103,104,],[91,116,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_start","S'",1,None,None,None),
  ('program_start -> program','program_start',1,'p_program_start','py_parser.py',20),
  ('program_start -> statement','program_start',1,'p_program_start','py_parser.py',21),
  ('program_start -> data_structure','program_start',1,'p_program_start','py_parser.py',22),
  ('data_structure -> class','data_structure',1,'p_data_structure','py_parser.py',28),
  ('data_structure -> struct','data_structure',1,'p_data_structure','py_parser.py',29),
  ('data_structure -> list_structure','data_structure',1,'p_data_structure','py_parser.py',30),
  ('data_structure -> array','data_structure',1,'p_data_structure','py_parser.py',31),
  ('data_structure -> empty','data_structure',1,'p_data_structure','py_parser.py',32),
  ('list_structure -> list','list_structure',1,'p_list_structure','py_parser.py',38),
  ('program -> type_declaration main_statement left_curl_op statement right_curl_op','program',5,'p_program','py_parser.py',43),
  ('program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op','program',9,'p_program','py_parser.py',44),
  ('type_declaration -> int_declaration','type_declaration',1,'p_type_declaration','py_parser.py',59),
  ('type_declaration -> float_declaration','type_declaration',1,'p_type_declaration','py_parser.py',60),
  ('type_declaration -> double_declaration','type_declaration',1,'p_type_declaration','py_parser.py',61),
  ('type_declaration -> string_declaration','type_declaration',1,'p_type_declaration','py_parser.py',62),
  ('type_declaration -> char_declaration','type_declaration',1,'p_type_declaration','py_parser.py',63),
  ('statement -> function_call_statement','statement',1,'p_statement','py_parser.py',68),
  ('statement -> conditional_statement','statement',1,'p_statement','py_parser.py',69),
  ('statement -> loop_statement','statement',1,'p_statement','py_parser.py',70),
  ('statement -> arithmetic_statement','statement',1,'p_statement','py_parser.py',71),
  ('statement -> break_state','statement',1,'p_statement','py_parser.py',72),
  ('statement -> return_state','statement',1,'p_statement','py_parser.py',73),
  ('statement -> function_declaration_statement','statement',1,'p_statement','py_parser.py',74),
  ('statement -> printed_statement','statement',1,'p_statement','py_parser.py',75),
  ('break_state -> break_statement','break_state',1,'p_break_statement','py_parser.py',81),
  ('printed_statement -> print_statement literal_or_identifier','printed_statement',2,'p_printed_statement','py_parser.py',87),
  ('printed_statement -> print_statement literal_or_identifier comma_statement identifier','printed_statement',4,'p_printed_statement','py_parser.py',88),
  ('return_state -> return_statement literal_or_identifier','return_state',2,'p_return_statement','py_parser.py',96),
  ('return_state -> return_statement statement','return_state',2,'p_return_statement','py_parser.py',97),
  ('conditional_statement -> if_block','conditional_statement',1,'p_conditional_statement','py_parser.py',102),
  ('conditional_statement -> if_block elif_block','conditional_statement',2,'p_conditional_statement','py_parser.py',103),
  ('conditional_statement -> if_block else_block','conditional_statement',2,'p_conditional_statement','py_parser.py',104),
  ('conditional_statement -> left_par_op inequalities right_par_op','conditional_statement',3,'p_conditional_statement','py_parser.py',105),
  ('conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op','conditional_statement',9,'p_conditional_statement','py_parser.py',106),
  ('if_block -> if_statement inequalities left_curl_op statement right_curl_op','if_block',5,'p_if_block','py_parser.py',121),
  ('else_block -> else_statement left_curl_op statement right_curl_op','else_block',4,'p_else_block','py_parser.py',127),
  ('elif_block -> elif_statement inequalities left_curl_op statement right_curl_op','elif_block',5,'p_elif_block','py_parser.py',133),
  ('inequalities -> literal_or_identifier inequalities_sym literal_or_identifier','inequalities',3,'p_inequalities','py_parser.py',138),
  ('inequalities_sym -> equivalent_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',147),
  ('inequalities_sym -> less_or_eq_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',148),
  ('inequalities_sym -> great_or_eq_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',149),
  ('inequalities_sym -> less_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',150),
  ('inequalities_sym -> great_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',151),
  ('inequalities_sym -> and','inequalities_sym',1,'p_inequalities_sym','py_parser.py',152),
  ('inequalities_sym -> or','inequalities_sym',1,'p_inequalities_sym','py_parser.py',153),
  ('inequalities_sym -> bool_literal','inequalities_sym',1,'p_inequalities_sym','py_parser.py',154),
  ('inequalities_sym -> not_equal','inequalities_sym',1,'p_inequalities_sym','py_parser.py',155),
  ('inequalities_sym -> <empty>','inequalities_sym',0,'p_inequalities_sym','py_parser.py',156),
  ('function_declaration_statement -> literal_or_identifier left_par_op function_parameter right_par_op left_curl_op statement right_curl_op','function_declaration_statement',7,'p_function_declaration_statement','py_parser.py',161),
  ('function_parameter -> literal_or_identifier','function_parameter',1,'p_function_parameter','py_parser.py',166),
  ('function_parameter -> literal_or_identifier comma_statement function_parameter','function_parameter',3,'p_function_parameter','py_parser.py',167),
  ('literal_or_identifier -> identifier','literal_or_identifier',1,'p_literal_or_identifier','py_parser.py',176),
  ('literal_or_identifier -> data_literal','literal_or_identifier',1,'p_literal_or_identifier','py_parser.py',177),
  ('function_call_statement -> literal_or_identifier left_par_op function_parameter right_par_op','function_call_statement',4,'p_function_call_statement','py_parser.py',182),
  ('loop_statement -> while_statement inequalities left_curl_op statement right_curl_op','loop_statement',5,'p_loop_statement','py_parser.py',187),
  ('loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op','loop_statement',6,'p_loop_statement','py_parser.py',188),
  ('loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op','loop_statement',9,'p_loop_statement','py_parser.py',189),
  ('arithmetic_statement -> arithmetic_expr','arithmetic_statement',1,'p_arithmetic_statement','py_parser.py',202),
  ('arithmetic_statement -> unary_op','arithmetic_statement',1,'p_arithmetic_statement','py_parser.py',203),
  ('unary_op -> identifier increment','unary_op',2,'p_unary_op','py_parser.py',208),
  ('unary_op -> identifier decrement','unary_op',2,'p_unary_op','py_parser.py',209),
  ('arithmetic_expr -> identifier assign_op arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',214),
  ('arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',215),
  ('arithmetic_expr -> left_par_op arithmetic_expr right_par_op','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',216),
  ('arithmetic_expr -> literal_or_identifier','arithmetic_expr',1,'p_arithmetic_expr','py_parser.py',217),
  ('arithmetic_expr -> identifier assign_op function_call_statement','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',218),
  ('arithmetic_op -> expo_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',230),
  ('arithmetic_op -> mul_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',231),
  ('arithmetic_op -> div_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',232),
  ('arithmetic_op -> add_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',233),
  ('arithmetic_op -> sub_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',234),
  ('data_literal -> int_literal','data_literal',1,'p_data_literal','py_parser.py',240),
  ('data_literal -> float_literal','data_literal',1,'p_data_literal','py_parser.py',241),
  ('data_literal -> double_literal','data_literal',1,'p_data_literal','py_parser.py',242),
  ('data_literal -> char_literal','data_literal',1,'p_data_literal','py_parser.py',243),
  ('data_literal -> string_literal','data_literal',1,'p_data_literal','py_parser.py',244),
  ('empty -> <empty>','empty',0,'p_empty','py_parser.py',249),
]
