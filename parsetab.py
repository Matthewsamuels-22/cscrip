
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocleft_par_opright_par_opleftexpo_opleftmul_opdiv_opleftadd_opsub_opnonassocassign_opadd_op and array assign_op bool_declaration bool_literal break_statement char_declaration char_literal class colon_statement comma_statement div_op do_statement double_declaration double_literal double_quotes elif_statement else_statement equivalent_op expo_op false_literal float_declaration float_literal for_statement full_stop_statement goto_statement great_op great_or_eq_op identifier if_statement in_statement int_declaration int_literal left_curl_op left_par_op less_op less_or_eq_op list main_statement mul_op not_equal or question_op return_statement right_curl_op right_par_op semi_colon_statement single_quotes string_declaration string_literal struct sub_op true_literal while_statement program_start : program\n                      | statement\n                      | data_structure\n                      data_structure : class\n                      | struct\n                      | list_structure\n                      | array\n                      | empty list_structure : listprogram : type_declaration main_statement left_curl_op statement right_curl_op\n               | type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op\n               type_declaration : int_declaration\n                        | float_declaration\n                        | double_declaration\n                        | string_declaration\n                        | char_declarationstatement : function_call_statement\n                 | conditional_statement\n                 | loop_statement\n                 | arithmetic_statement\n                 | break_statement\n                 | return_statement identifier\n                 | return_statement\n                 conditional_statement : if_block\n                                | if_block elif_block\n                                | if_block else_block\n                                | left_par_op inequalities right_par_op\n                              | left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op\n                             if_block : if_statement inequalities left_curl_op statement right_curl_opelse_block : else_statement left_curl_op statement right_curl_op\n                  elif_block : elif_statement inequalities left_curl_op statement right_curl_opinequalities : literal_or_identifier inequalities_sym  literal_or_identifierinequalities_sym : equivalent_op\n                        | less_or_eq_op\n                        | great_or_eq_op\n                        | less_op\n                        | great_op\n                        | and\n                        | or\n                        | bool_literal\n                        | not_equal\n                        |  function_parameter  : literal_or_identifier\n                            | function_parameter_list\n                            | left_par_op function_parameter right_par_op\n                             function_parameter_list : function_parameter comma_statement literal_or_identifier literal_or_identifier : identifier\n                             | data_literalfunction_call_statement : function_parameter  loop_statement : while_statement inequalities left_curl_op statement right_curl_op\n                      |  for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op\n                      | for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op\n                      arithmetic_statement : arithmetic_exprarithmetic_expr : identifier assign_op arithmetic_expr\n                       | arithmetic_expr arithmetic_op arithmetic_expr\n                       | left_par_op arithmetic_expr right_par_op\n                       | literal_or_identifier\n                       | identifier assign_op function_call_statementarithmetic_op : expo_op\n                    | mul_op\n                    | div_op\n                    | add_op\n                     | sub_op\n                     data_literal : int_literal\n                    | float_literal\n                    | double_literal\n                    | char_literal\n                    | string_literal empty : '
    
_lr_action_items = {'break_statement':([0,65,86,87,90,95,98,103,115,116,117,],[12,12,12,12,12,12,12,12,12,12,12,]),'return_statement':([0,65,86,87,90,95,98,103,115,116,117,],[13,13,13,13,13,13,13,13,13,13,13,]),'class':([0,],[14,]),'struct':([0,],[15,]),'array':([0,],[17,]),'int_declaration':([0,66,],[19,19,]),'float_declaration':([0,66,],[20,20,]),'double_declaration':([0,66,],[21,21,]),'string_declaration':([0,66,],[22,22,]),'char_declaration':([0,66,],[23,23,]),'left_par_op':([0,6,27,39,40,45,56,58,59,60,61,62,63,65,82,86,87,90,95,98,103,108,115,116,117,],[6,40,56,66,40,82,56,56,-59,-60,-61,-62,-63,6,82,6,6,6,6,6,6,56,6,6,6,]),'while_statement':([0,65,86,87,90,95,98,103,115,116,117,],[26,26,26,26,26,26,26,26,26,26,26,]),'for_statement':([0,65,86,87,90,95,98,103,115,116,117,],[27,27,27,27,27,27,27,27,27,27,27,]),'list':([0,],[29,]),'$end':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,24,25,28,29,30,31,33,34,35,36,37,38,46,48,49,54,57,67,68,69,80,81,83,84,89,101,105,106,109,112,113,121,122,123,],[-69,0,-1,-2,-3,-47,-17,-18,-19,-20,-21,-23,-4,-5,-6,-7,-8,-49,-24,-53,-9,-43,-44,-48,-64,-65,-66,-67,-68,-22,-25,-26,-47,-57,-27,-45,-56,-54,-58,-43,-46,-55,-10,-30,-50,-29,-31,-51,-11,-28,-52,]),'if_statement':([0,65,86,87,90,95,98,103,115,116,117,],[32,32,32,32,32,32,32,32,32,32,32,]),'identifier':([0,6,7,13,19,20,21,22,23,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,92,95,98,103,108,115,116,117,],[7,7,-47,46,-12,-13,-14,-15,-16,54,7,54,-48,-64,-65,-66,-67,-68,7,-42,7,54,54,-42,-47,7,7,-59,-60,-61,-62,-63,7,54,-33,-34,-35,-36,-37,-38,-39,-40,-41,7,7,7,54,7,102,7,7,7,7,7,7,7,]),'int_literal':([0,6,7,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,95,98,103,108,115,116,117,],[34,34,-47,34,34,34,-48,-64,-65,-66,-67,-68,34,-42,34,34,34,-42,-47,34,34,-59,-60,-61,-62,-63,34,34,-33,-34,-35,-36,-37,-38,-39,-40,-41,34,34,34,34,34,34,34,34,34,34,34,34,]),'float_literal':([0,6,7,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,95,98,103,108,115,116,117,],[35,35,-47,35,35,35,-48,-64,-65,-66,-67,-68,35,-42,35,35,35,-42,-47,35,35,-59,-60,-61,-62,-63,35,35,-33,-34,-35,-36,-37,-38,-39,-40,-41,35,35,35,35,35,35,35,35,35,35,35,35,]),'double_literal':([0,6,7,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,95,98,103,108,115,116,117,],[36,36,-47,36,36,36,-48,-64,-65,-66,-67,-68,36,-42,36,36,36,-42,-47,36,36,-59,-60,-61,-62,-63,36,36,-33,-34,-35,-36,-37,-38,-39,-40,-41,36,36,36,36,36,36,36,36,36,36,36,36,]),'char_literal':([0,6,7,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,95,98,103,108,115,116,117,],[37,37,-47,37,37,37,-48,-64,-65,-66,-67,-68,37,-42,37,37,37,-42,-47,37,37,-59,-60,-61,-62,-63,37,37,-33,-34,-35,-36,-37,-38,-39,-40,-41,37,37,37,37,37,37,37,37,37,37,37,37,]),'string_literal':([0,6,7,26,27,32,33,34,35,36,37,38,40,44,45,47,50,53,54,56,58,59,60,61,62,63,65,70,71,72,73,74,75,76,77,78,79,82,86,87,88,90,95,98,103,108,115,116,117,],[38,38,-47,38,38,38,-48,-64,-65,-66,-67,-68,38,-42,38,38,38,-42,-47,38,38,-59,-60,-61,-62,-63,38,38,-33,-34,-35,-36,-37,-38,-39,-40,-41,38,38,38,38,38,38,38,38,38,38,38,38,]),'main_statement':([5,19,20,21,22,23,],[39,-12,-13,-14,-15,-16,]),'assign_op':([7,],[45,]),'comma_statement':([7,24,30,31,33,34,35,36,37,38,42,44,54,68,83,84,],[-47,47,-43,-44,-48,-64,-65,-66,-67,-68,47,-43,-47,-45,-43,-46,]),'expo_op':([7,24,28,30,31,33,34,35,36,37,38,43,44,54,57,68,69,80,81,83,84,89,],[-47,-49,59,-57,-44,-48,-64,-65,-66,-67,-68,59,-57,-47,-57,-45,-56,-54,-58,-43,-46,59,]),'mul_op':([7,24,28,30,31,33,34,35,36,37,38,43,44,54,57,68,69,80,81,83,84,89,],[-47,-49,60,-57,-44,-48,-64,-65,-66,-67,-68,60,-57,-47,-57,-45,-56,-54,-58,-43,-46,60,]),'div_op':([7,24,28,30,31,33,34,35,36,37,38,43,44,54,57,68,69,80,81,83,84,89,],[-47,-49,61,-57,-44,-48,-64,-65,-66,-67,-68,61,-57,-47,-57,-45,-56,-54,-58,-43,-46,61,]),'add_op':([7,24,28,30,31,33,34,35,36,37,38,43,44,54,57,68,69,80,81,83,84,89,],[-47,-49,62,-57,-44,-48,-64,-65,-66,-67,-68,62,-57,-47,-57,-45,-56,-54,-58,-43,-46,62,]),'sub_op':([7,24,28,30,31,33,34,35,36,37,38,43,44,54,57,68,69,80,81,83,84,89,],[-47,-49,63,-57,-44,-48,-64,-65,-66,-67,-68,63,-57,-47,-57,-45,-56,-54,-58,-43,-46,63,]),'equivalent_op':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,71,71,-47,]),'less_or_eq_op':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,72,72,-47,]),'great_or_eq_op':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,73,73,-47,]),'less_op':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,74,74,-47,]),'great_op':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,75,75,-47,]),'and':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,76,76,-47,]),'or':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,77,77,-47,]),'bool_literal':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,78,78,-47,]),'not_equal':([7,33,34,35,36,37,38,44,53,54,],[-47,-48,-64,-65,-66,-67,-68,79,79,-47,]),'right_par_op':([7,24,30,31,33,34,35,36,37,38,41,42,43,44,54,57,68,69,80,81,83,84,89,94,102,],[-47,-49,-43,-44,-48,-64,-65,-66,-67,-68,67,68,69,-43,-47,-57,-45,-56,-54,-58,-43,-46,-55,-32,110,]),'semi_colon_statement':([7,24,28,31,33,34,35,36,37,38,54,55,57,68,69,80,81,83,84,89,94,99,],[-47,-49,-53,-44,-48,-64,-65,-66,-67,-68,-47,88,-57,-45,-56,-54,-58,-43,-46,-55,-32,108,]),'right_curl_op':([7,8,9,10,11,12,13,24,25,28,30,31,33,34,35,36,37,38,46,48,49,54,57,67,68,69,80,81,83,84,89,91,96,97,100,104,105,106,107,109,112,113,118,119,120,122,123,],[-47,-17,-18,-19,-20,-21,-23,-49,-24,-53,-43,-44,-48,-64,-65,-66,-67,-68,-22,-25,-26,-47,-57,-27,-45,-56,-54,-58,-43,-46,-55,101,105,106,109,112,-30,-50,113,-29,-31,-51,121,122,123,-28,-52,]),'colon_statement':([7,8,9,10,11,12,13,24,25,28,30,31,33,34,35,36,37,38,46,48,49,54,57,67,68,69,80,81,83,84,89,105,106,109,111,112,113,122,123,],[-47,-17,-18,-19,-20,-21,-23,-49,-24,-53,-43,-44,-48,-64,-65,-66,-67,-68,-22,-25,-26,-47,-57,-27,-45,-56,-54,-58,-43,-46,-55,-30,-50,-29,116,-31,-51,-28,-52,]),'left_curl_op':([7,24,28,31,33,34,35,36,37,38,39,51,52,54,57,64,68,69,80,81,83,84,85,88,89,93,94,110,114,],[-47,-49,-53,-44,-48,-64,-65,-66,-67,-68,65,86,87,-47,-57,90,-45,-56,-54,-58,-43,-46,95,98,-55,103,-32,115,117,]),'elif_statement':([25,109,],[50,-29,]),'else_statement':([25,109,],[51,-29,]),'question_op':([67,],[93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_start':([0,],[1,]),'program':([0,],[2,]),'statement':([0,65,86,87,90,95,98,103,115,116,117,],[3,91,96,97,100,104,107,111,118,119,120,]),'data_structure':([0,],[4,]),'type_declaration':([0,66,],[5,92,]),'function_call_statement':([0,45,65,86,87,90,95,98,103,115,116,117,],[8,81,8,8,8,8,8,8,8,8,8,8,]),'conditional_statement':([0,65,86,87,90,95,98,103,115,116,117,],[9,9,9,9,9,9,9,9,9,9,9,]),'loop_statement':([0,65,86,87,90,95,98,103,115,116,117,],[10,10,10,10,10,10,10,10,10,10,10,]),'arithmetic_statement':([0,27,65,86,87,90,95,98,103,108,115,116,117,],[11,55,11,11,11,11,11,11,11,114,11,11,11,]),'list_structure':([0,],[16,]),'empty':([0,],[18,]),'function_parameter':([0,6,40,45,65,82,86,87,90,95,98,103,115,116,117,],[24,42,42,24,24,42,24,24,24,24,24,24,24,24,24,]),'if_block':([0,65,86,87,90,95,98,103,115,116,117,],[25,25,25,25,25,25,25,25,25,25,25,]),'arithmetic_expr':([0,6,27,40,45,56,58,65,82,86,87,90,95,98,103,108,115,116,117,],[28,43,28,43,80,43,89,28,43,28,28,28,28,28,28,28,28,28,28,]),'literal_or_identifier':([0,6,26,27,32,40,45,47,50,56,58,65,70,82,86,87,88,90,95,98,103,108,115,116,117,],[30,44,53,57,53,30,83,84,53,57,57,30,94,83,30,30,53,30,30,30,30,57,30,30,30,]),'function_parameter_list':([0,6,40,45,65,82,86,87,90,95,98,103,115,116,117,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'data_literal':([0,6,26,27,32,40,45,47,50,56,58,65,70,82,86,87,88,90,95,98,103,108,115,116,117,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'inequalities':([6,26,32,50,88,],[41,52,64,85,99,]),'elif_block':([25,],[48,]),'else_block':([25,],[49,]),'arithmetic_op':([28,43,80,89,],[58,58,58,58,]),'inequalities_sym':([44,53,],[70,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_start","S'",1,None,None,None),
  ('program_start -> program','program_start',1,'p_program_start','py_parser.py',18),
  ('program_start -> statement','program_start',1,'p_program_start','py_parser.py',19),
  ('program_start -> data_structure','program_start',1,'p_program_start','py_parser.py',20),
  ('data_structure -> class','data_structure',1,'p_data_structure','py_parser.py',26),
  ('data_structure -> struct','data_structure',1,'p_data_structure','py_parser.py',27),
  ('data_structure -> list_structure','data_structure',1,'p_data_structure','py_parser.py',28),
  ('data_structure -> array','data_structure',1,'p_data_structure','py_parser.py',29),
  ('data_structure -> empty','data_structure',1,'p_data_structure','py_parser.py',30),
  ('list_structure -> list','list_structure',1,'p_list_structure','py_parser.py',36),
  ('program -> type_declaration main_statement left_curl_op statement right_curl_op','program',5,'p_program','py_parser.py',41),
  ('program -> type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op','program',9,'p_program','py_parser.py',42),
  ('type_declaration -> int_declaration','type_declaration',1,'p_type_declaration','py_parser.py',51),
  ('type_declaration -> float_declaration','type_declaration',1,'p_type_declaration','py_parser.py',52),
  ('type_declaration -> double_declaration','type_declaration',1,'p_type_declaration','py_parser.py',53),
  ('type_declaration -> string_declaration','type_declaration',1,'p_type_declaration','py_parser.py',54),
  ('type_declaration -> char_declaration','type_declaration',1,'p_type_declaration','py_parser.py',55),
  ('statement -> function_call_statement','statement',1,'p_statement','py_parser.py',60),
  ('statement -> conditional_statement','statement',1,'p_statement','py_parser.py',61),
  ('statement -> loop_statement','statement',1,'p_statement','py_parser.py',62),
  ('statement -> arithmetic_statement','statement',1,'p_statement','py_parser.py',63),
  ('statement -> break_statement','statement',1,'p_statement','py_parser.py',64),
  ('statement -> return_statement identifier','statement',2,'p_statement','py_parser.py',65),
  ('statement -> return_statement','statement',1,'p_statement','py_parser.py',66),
  ('conditional_statement -> if_block','conditional_statement',1,'p_conditional_statement','py_parser.py',72),
  ('conditional_statement -> if_block elif_block','conditional_statement',2,'p_conditional_statement','py_parser.py',73),
  ('conditional_statement -> if_block else_block','conditional_statement',2,'p_conditional_statement','py_parser.py',74),
  ('conditional_statement -> left_par_op inequalities right_par_op','conditional_statement',3,'p_conditional_statement','py_parser.py',75),
  ('conditional_statement -> left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op','conditional_statement',9,'p_conditional_statement','py_parser.py',76),
  ('if_block -> if_statement inequalities left_curl_op statement right_curl_op','if_block',5,'p_if_block','py_parser.py',91),
  ('else_block -> else_statement left_curl_op statement right_curl_op','else_block',4,'p_else_block','py_parser.py',97),
  ('elif_block -> elif_statement inequalities left_curl_op statement right_curl_op','elif_block',5,'p_elif_block','py_parser.py',103),
  ('inequalities -> literal_or_identifier inequalities_sym literal_or_identifier','inequalities',3,'p_inequalities','py_parser.py',108),
  ('inequalities_sym -> equivalent_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',117),
  ('inequalities_sym -> less_or_eq_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',118),
  ('inequalities_sym -> great_or_eq_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',119),
  ('inequalities_sym -> less_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',120),
  ('inequalities_sym -> great_op','inequalities_sym',1,'p_inequalities_sym','py_parser.py',121),
  ('inequalities_sym -> and','inequalities_sym',1,'p_inequalities_sym','py_parser.py',122),
  ('inequalities_sym -> or','inequalities_sym',1,'p_inequalities_sym','py_parser.py',123),
  ('inequalities_sym -> bool_literal','inequalities_sym',1,'p_inequalities_sym','py_parser.py',124),
  ('inequalities_sym -> not_equal','inequalities_sym',1,'p_inequalities_sym','py_parser.py',125),
  ('inequalities_sym -> <empty>','inequalities_sym',0,'p_inequalities_sym','py_parser.py',126),
  ('function_parameter -> literal_or_identifier','function_parameter',1,'p_function_parameter','py_parser.py',131),
  ('function_parameter -> function_parameter_list','function_parameter',1,'p_function_parameter','py_parser.py',132),
  ('function_parameter -> left_par_op function_parameter right_par_op','function_parameter',3,'p_function_parameter','py_parser.py',133),
  ('function_parameter_list -> function_parameter comma_statement literal_or_identifier','function_parameter_list',3,'p_function_parameter_list','py_parser.py',142),
  ('literal_or_identifier -> identifier','literal_or_identifier',1,'p_literal_or_identifier','py_parser.py',147),
  ('literal_or_identifier -> data_literal','literal_or_identifier',1,'p_literal_or_identifier','py_parser.py',148),
  ('function_call_statement -> function_parameter','function_call_statement',1,'p_function_call_statement','py_parser.py',153),
  ('loop_statement -> while_statement inequalities left_curl_op statement right_curl_op','loop_statement',5,'p_loop_statement','py_parser.py',158),
  ('loop_statement -> for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op','loop_statement',6,'p_loop_statement','py_parser.py',159),
  ('loop_statement -> for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op','loop_statement',9,'p_loop_statement','py_parser.py',160),
  ('arithmetic_statement -> arithmetic_expr','arithmetic_statement',1,'p_arithmetic_statement','py_parser.py',171),
  ('arithmetic_expr -> identifier assign_op arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',176),
  ('arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',177),
  ('arithmetic_expr -> left_par_op arithmetic_expr right_par_op','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',178),
  ('arithmetic_expr -> literal_or_identifier','arithmetic_expr',1,'p_arithmetic_expr','py_parser.py',179),
  ('arithmetic_expr -> identifier assign_op function_call_statement','arithmetic_expr',3,'p_arithmetic_expr','py_parser.py',180),
  ('arithmetic_op -> expo_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',190),
  ('arithmetic_op -> mul_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',191),
  ('arithmetic_op -> div_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',192),
  ('arithmetic_op -> add_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',193),
  ('arithmetic_op -> sub_op','arithmetic_op',1,'p_arithmetic_op','py_parser.py',194),
  ('data_literal -> int_literal','data_literal',1,'p_data_literal','py_parser.py',200),
  ('data_literal -> float_literal','data_literal',1,'p_data_literal','py_parser.py',201),
  ('data_literal -> double_literal','data_literal',1,'p_data_literal','py_parser.py',202),
  ('data_literal -> char_literal','data_literal',1,'p_data_literal','py_parser.py',203),
  ('data_literal -> string_literal','data_literal',1,'p_data_literal','py_parser.py',204),
  ('empty -> <empty>','empty',0,'p_empty','py_parser.py',209),
]
